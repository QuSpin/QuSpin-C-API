#ifndef __QUSPIN_CORE_BASIS_ABI__
    #define __QUSPIN_CORE_BASIS_ABI__

    #include <numpy/ndarrayobject.h>
    #include <numpy/ndarraytypes.h>
    #include <quspin_core_abi/numpy_interface.h>
    #include <quspin_core_abi/complex_ops.h>
    #include <quspin_core_abi/symmetry_abi.h>
    #include <quspin_core_abi/operator_abi.h>
    #include <memory>

    #include <quspin/quspin.h>


    namespace quspin_core_abi {
    
    using bit_subspace_32 = quspin::basis::bit_subspace<quspin::basis::uint32_t,npy_intp,quspin::basis::uint8_t>;

using dit_subspace_32 = quspin::basis::dit_subspace<quspin::basis::uint32_t,npy_intp,quspin::basis::uint8_t>;

using bit_fullspace_32 = quspin::basis::bit_fullspace<quspin::basis::uint32_t,npy_intp>;

using dit_fullspace_32 = quspin::basis::dit_fullspace<quspin::basis::uint32_t,npy_intp>;

using bit_subspace_64 = quspin::basis::bit_subspace<quspin::basis::uint64_t,npy_intp,quspin::basis::uint8_t>;

using dit_subspace_64 = quspin::basis::dit_subspace<quspin::basis::uint64_t,npy_intp,quspin::basis::uint8_t>;

using bit_fullspace_64 = quspin::basis::bit_fullspace<quspin::basis::uint64_t,npy_intp>;

using dit_fullspace_64 = quspin::basis::dit_fullspace<quspin::basis::uint64_t,npy_intp>;

using bit_subspace_128 = quspin::basis::bit_subspace<quspin::basis::uint128_t,npy_intp,quspin::basis::uint8_t>;

using dit_subspace_128 = quspin::basis::dit_subspace<quspin::basis::uint128_t,npy_intp,quspin::basis::uint8_t>;

using bit_subspace_1024 = quspin::basis::bit_subspace<quspin::basis::uint1024_t,npy_intp,int>;

using dit_subspace_1024 = quspin::basis::dit_subspace<quspin::basis::uint1024_t,npy_intp,int>;

using bit_subspace_4096 = quspin::basis::bit_subspace<quspin::basis::uint4096_t,npy_intp,int>;

using dit_subspace_4096 = quspin::basis::dit_subspace<quspin::basis::uint4096_t,npy_intp,int>;

using bit_subspace_16384 = quspin::basis::bit_subspace<quspin::basis::uint16384_t,npy_intp,int>;

using dit_subspace_16384 = quspin::basis::dit_subspace<quspin::basis::uint16384_t,npy_intp,int>;

using symmetric_bitbasis_32 = quspin::basis::symmetric_basis<bit_subspace_32,bit_symmetry<quspin::basis::uint32_t>>;

using symmetric_ditbasis_32 = quspin::basis::symmetric_basis<dit_subspace_32,dit_symmetry<quspin::basis::uint32_t>>;

using subspace_bitbasis_32 = quspin::basis::basis<bit_subspace_32>;

using subspace_ditbasis_32 = quspin::basis::basis<dit_subspace_32>;

using symmetric_bitbasis_64 = quspin::basis::symmetric_basis<bit_subspace_64,bit_symmetry<quspin::basis::uint64_t>>;

using symmetric_ditbasis_64 = quspin::basis::symmetric_basis<dit_subspace_64,dit_symmetry<quspin::basis::uint64_t>>;

using subspace_bitbasis_64 = quspin::basis::basis<bit_subspace_64>;

using subspace_ditbasis_64 = quspin::basis::basis<dit_subspace_64>;

using symmetric_bitbasis_128 = quspin::basis::symmetric_basis<bit_subspace_128,bit_symmetry<quspin::basis::uint128_t>>;

using symmetric_ditbasis_128 = quspin::basis::symmetric_basis<dit_subspace_128,dit_symmetry<quspin::basis::uint128_t>>;

using subspace_bitbasis_128 = quspin::basis::basis<bit_subspace_128>;

using subspace_ditbasis_128 = quspin::basis::basis<dit_subspace_128>;

using symmetric_bitbasis_1024 = quspin::basis::symmetric_basis<bit_subspace_1024,bit_symmetry<quspin::basis::uint1024_t>>;

using symmetric_ditbasis_1024 = quspin::basis::symmetric_basis<dit_subspace_1024,dit_symmetry<quspin::basis::uint1024_t>>;

using subspace_bitbasis_1024 = quspin::basis::basis<bit_subspace_1024>;

using subspace_ditbasis_1024 = quspin::basis::basis<dit_subspace_1024>;

using symmetric_bitbasis_4096 = quspin::basis::symmetric_basis<bit_subspace_4096,bit_symmetry<quspin::basis::uint4096_t>>;

using symmetric_ditbasis_4096 = quspin::basis::symmetric_basis<dit_subspace_4096,dit_symmetry<quspin::basis::uint4096_t>>;

using subspace_bitbasis_4096 = quspin::basis::basis<bit_subspace_4096>;

using subspace_ditbasis_4096 = quspin::basis::basis<dit_subspace_4096>;

using symmetric_bitbasis_16384 = quspin::basis::symmetric_basis<bit_subspace_16384,bit_symmetry<quspin::basis::uint16384_t>>;

using symmetric_ditbasis_16384 = quspin::basis::symmetric_basis<dit_subspace_16384,dit_symmetry<quspin::basis::uint16384_t>>;

using subspace_bitbasis_16384 = quspin::basis::basis<bit_subspace_16384>;

using subspace_ditbasis_16384 = quspin::basis::basis<dit_subspace_16384>;

using subspace_bitbasis_32 = quspin::basis::basis<bit_subspace_32>;

using subspace_ditbasis_32 = quspin::basis::basis<dit_subspace_32>;

using fullspace_bitbasis_32 = quspin::basis::basis<bit_fullspace_32>;

using fullspace_ditbasis_32 = quspin::basis::basis<dit_fullspace_32>;

using subspace_bitbasis_64 = quspin::basis::basis<bit_subspace_64>;

using subspace_ditbasis_64 = quspin::basis::basis<dit_subspace_64>;

using fullspace_bitbasis_64 = quspin::basis::basis<bit_fullspace_64>;

using fullspace_ditbasis_64 = quspin::basis::basis<dit_fullspace_64>;

    // abi class definitions
    class bosonic_basis_abi
{
private:
    const int lhss;
    const size_t basis_switch_code;
    std::shared_ptr<void> basis_ptr;
    static size_t generate_basis_switch_code(
        const size_t bits,
        const int lhss,
        void * symmetry,
        const bool full_space)
    {
        switch(bits)
        {
            case 32:
                if(lhss<2){throw std::domain_error("expecting value of lhss to be in range: 1 < lhss < 255");}
                else if(lhss==2)
                {
                    if(symmetry)
                    {
                        return (full_space ? -1 /* error handled in constructor */ : 0);
                    }
                    else
                    {
                        return (full_space ? 1 : 2);
                    }
                    
                }
                else
                {
                    if(symmetry)
                    {
                        return (full_space ? -1 /* error handled in constructor */ : 3);
                    }
                    else
                    {
                        return (full_space ? 4 : 5);
                    }
                    
                }
            case 64:
                if(lhss<2){throw std::domain_error("expecting value of lhss to be in range: 1 < lhss < 255");}
                else if(lhss==2)
                {
                    if(symmetry)
                    {
                        return (full_space ? -1 /* error handled in constructor */ : 6);
                    }
                    else
                    {
                        return (full_space ? 7 : 8);
                    }
                    
                }
                else
                {
                    if(symmetry)
                    {
                        return (full_space ? -1 /* error handled in constructor */ : 9);
                    }
                    else
                    {
                        return (full_space ? 10 : 11);
                    }
                    
                }
            case 128:
                if(lhss<2){return -1;}
                else if(lhss==2)
                {
                    if(symmetry)
                    {
                        return (full_space ? -1 /* error handled in constructor */  : 12);
                    }
                    else
                    {
                        return (full_space ? -1 /* error handled in constructor */  : 13);
                    }
                    
                }
                else
                {
                    if(symmetry)
                    {
                        return (full_space ? -1 /* error handled in constructor */  : 14);
                    }
                    else
                    {
                        return (full_space ? -1 /* error handled in constructor */  : 15);
                    }
                    
                }
            case 1024:
                if(lhss<2){return -1;}
                else if(lhss==2)
                {
                    if(symmetry)
                    {
                        return (full_space ? -1 /* error handled in constructor */  : 16);
                    }
                    else
                    {
                        return (full_space ? -1 /* error handled in constructor */  : 17);
                    }
                    
                }
                else
                {
                    if(symmetry)
                    {
                        return (full_space ? -1 /* error handled in constructor */  : 18);
                    }
                    else
                    {
                        return (full_space ? -1 /* error handled in constructor */  : 19);
                    }
                    
                }
            case 4096:
                if(lhss<2){return -1;}
                else if(lhss==2)
                {
                    if(symmetry)
                    {
                        return (full_space ? -1 /* error handled in constructor */  : 20);
                    }
                    else
                    {
                        return (full_space ? -1 /* error handled in constructor */  : 21);
                    }
                    
                }
                else
                {
                    if(symmetry)
                    {
                        return (full_space ? -1 /* error handled in constructor */  : 22);
                    }
                    else
                    {
                        return (full_space ? -1 /* error handled in constructor */  : 23);
                    }
                    
                }
            case 16384:
                if(lhss<2){return -1;}
                else if(lhss==2)
                {
                    if(symmetry)
                    {
                        return (full_space ? -1 /* error handled in constructor */  : 24);
                    }
                    else
                    {
                        return (full_space ? -1 /* error handled in constructor */  : 25);
                    }
                    
                }
                else
                {
                    if(symmetry)
                    {
                        return (full_space ? -1 /* error handled in constructor */  : 26);
                    }
                    else
                    {
                        return (full_space ? -1 /* error handled in constructor */  : 27);
                    }
                    
                }
            default:
                throw std::invalid_argument("expecting value of bits to be in: [32, 64, 128, 1024, 4096, 16384]");
        
        }
    }
    static size_t generate_term_switch_code(
        const size_t basis_switch_code,
        NPY_TYPES J_typenum,
        NPY_TYPES T_typenum,
        OPERATOR_TYPES op_type)
    {
        switch(basis_switch_code)
        {
            case 0:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 0;
                                case OP_TWO_BODY:
                                    return 1;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 2;
                                case OP_TWO_BODY:
                                    return 3;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 4;
                                case OP_TWO_BODY:
                                    return 5;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 6;
                                case OP_TWO_BODY:
                                    return 7;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 8;
                                case OP_TWO_BODY:
                                    return 9;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 10;
                                case OP_TWO_BODY:
                                    return 11;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 12;
                                case OP_TWO_BODY:
                                    return 13;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 14;
                                case OP_TWO_BODY:
                                    return 15;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 1:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 16;
                                case OP_TWO_BODY:
                                    return 17;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 18;
                                case OP_TWO_BODY:
                                    return 19;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 20;
                                case OP_TWO_BODY:
                                    return 21;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 22;
                                case OP_TWO_BODY:
                                    return 23;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 24;
                                case OP_TWO_BODY:
                                    return 25;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 26;
                                case OP_TWO_BODY:
                                    return 27;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 28;
                                case OP_TWO_BODY:
                                    return 29;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 30;
                                case OP_TWO_BODY:
                                    return 31;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 32;
                                case OP_TWO_BODY:
                                    return 33;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 34;
                                case OP_TWO_BODY:
                                    return 35;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 36;
                                case OP_TWO_BODY:
                                    return 37;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 38;
                                case OP_TWO_BODY:
                                    return 39;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 2:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 40;
                                case OP_TWO_BODY:
                                    return 41;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 42;
                                case OP_TWO_BODY:
                                    return 43;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 44;
                                case OP_TWO_BODY:
                                    return 45;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 46;
                                case OP_TWO_BODY:
                                    return 47;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 48;
                                case OP_TWO_BODY:
                                    return 49;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 50;
                                case OP_TWO_BODY:
                                    return 51;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 52;
                                case OP_TWO_BODY:
                                    return 53;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 54;
                                case OP_TWO_BODY:
                                    return 55;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 56;
                                case OP_TWO_BODY:
                                    return 57;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 58;
                                case OP_TWO_BODY:
                                    return 59;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 60;
                                case OP_TWO_BODY:
                                    return 61;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 62;
                                case OP_TWO_BODY:
                                    return 63;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 3:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 64;
                                case OP_TWO_BODY:
                                    return 65;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 66;
                                case OP_TWO_BODY:
                                    return 67;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 68;
                                case OP_TWO_BODY:
                                    return 69;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 70;
                                case OP_TWO_BODY:
                                    return 71;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 72;
                                case OP_TWO_BODY:
                                    return 73;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 74;
                                case OP_TWO_BODY:
                                    return 75;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 76;
                                case OP_TWO_BODY:
                                    return 77;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 78;
                                case OP_TWO_BODY:
                                    return 79;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 4:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 80;
                                case OP_TWO_BODY:
                                    return 81;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 82;
                                case OP_TWO_BODY:
                                    return 83;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 84;
                                case OP_TWO_BODY:
                                    return 85;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 86;
                                case OP_TWO_BODY:
                                    return 87;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 88;
                                case OP_TWO_BODY:
                                    return 89;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 90;
                                case OP_TWO_BODY:
                                    return 91;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 92;
                                case OP_TWO_BODY:
                                    return 93;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 94;
                                case OP_TWO_BODY:
                                    return 95;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 96;
                                case OP_TWO_BODY:
                                    return 97;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 98;
                                case OP_TWO_BODY:
                                    return 99;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 100;
                                case OP_TWO_BODY:
                                    return 101;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 102;
                                case OP_TWO_BODY:
                                    return 103;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 5:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 104;
                                case OP_TWO_BODY:
                                    return 105;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 106;
                                case OP_TWO_BODY:
                                    return 107;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 108;
                                case OP_TWO_BODY:
                                    return 109;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 110;
                                case OP_TWO_BODY:
                                    return 111;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 112;
                                case OP_TWO_BODY:
                                    return 113;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 114;
                                case OP_TWO_BODY:
                                    return 115;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 116;
                                case OP_TWO_BODY:
                                    return 117;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 118;
                                case OP_TWO_BODY:
                                    return 119;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 120;
                                case OP_TWO_BODY:
                                    return 121;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 122;
                                case OP_TWO_BODY:
                                    return 123;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 124;
                                case OP_TWO_BODY:
                                    return 125;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 126;
                                case OP_TWO_BODY:
                                    return 127;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 6:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 128;
                                case OP_TWO_BODY:
                                    return 129;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 130;
                                case OP_TWO_BODY:
                                    return 131;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 132;
                                case OP_TWO_BODY:
                                    return 133;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 134;
                                case OP_TWO_BODY:
                                    return 135;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 136;
                                case OP_TWO_BODY:
                                    return 137;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 138;
                                case OP_TWO_BODY:
                                    return 139;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 140;
                                case OP_TWO_BODY:
                                    return 141;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 142;
                                case OP_TWO_BODY:
                                    return 143;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 7:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 144;
                                case OP_TWO_BODY:
                                    return 145;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 146;
                                case OP_TWO_BODY:
                                    return 147;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 148;
                                case OP_TWO_BODY:
                                    return 149;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 150;
                                case OP_TWO_BODY:
                                    return 151;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 152;
                                case OP_TWO_BODY:
                                    return 153;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 154;
                                case OP_TWO_BODY:
                                    return 155;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 156;
                                case OP_TWO_BODY:
                                    return 157;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 158;
                                case OP_TWO_BODY:
                                    return 159;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 160;
                                case OP_TWO_BODY:
                                    return 161;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 162;
                                case OP_TWO_BODY:
                                    return 163;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 164;
                                case OP_TWO_BODY:
                                    return 165;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 166;
                                case OP_TWO_BODY:
                                    return 167;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 8:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 168;
                                case OP_TWO_BODY:
                                    return 169;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 170;
                                case OP_TWO_BODY:
                                    return 171;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 172;
                                case OP_TWO_BODY:
                                    return 173;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 174;
                                case OP_TWO_BODY:
                                    return 175;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 176;
                                case OP_TWO_BODY:
                                    return 177;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 178;
                                case OP_TWO_BODY:
                                    return 179;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 180;
                                case OP_TWO_BODY:
                                    return 181;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 182;
                                case OP_TWO_BODY:
                                    return 183;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 184;
                                case OP_TWO_BODY:
                                    return 185;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 186;
                                case OP_TWO_BODY:
                                    return 187;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 188;
                                case OP_TWO_BODY:
                                    return 189;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 190;
                                case OP_TWO_BODY:
                                    return 191;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 9:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 192;
                                case OP_TWO_BODY:
                                    return 193;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 194;
                                case OP_TWO_BODY:
                                    return 195;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 196;
                                case OP_TWO_BODY:
                                    return 197;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 198;
                                case OP_TWO_BODY:
                                    return 199;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 200;
                                case OP_TWO_BODY:
                                    return 201;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 202;
                                case OP_TWO_BODY:
                                    return 203;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 204;
                                case OP_TWO_BODY:
                                    return 205;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 206;
                                case OP_TWO_BODY:
                                    return 207;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 10:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 208;
                                case OP_TWO_BODY:
                                    return 209;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 210;
                                case OP_TWO_BODY:
                                    return 211;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 212;
                                case OP_TWO_BODY:
                                    return 213;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 214;
                                case OP_TWO_BODY:
                                    return 215;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 216;
                                case OP_TWO_BODY:
                                    return 217;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 218;
                                case OP_TWO_BODY:
                                    return 219;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 220;
                                case OP_TWO_BODY:
                                    return 221;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 222;
                                case OP_TWO_BODY:
                                    return 223;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 224;
                                case OP_TWO_BODY:
                                    return 225;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 226;
                                case OP_TWO_BODY:
                                    return 227;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 228;
                                case OP_TWO_BODY:
                                    return 229;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 230;
                                case OP_TWO_BODY:
                                    return 231;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 11:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 232;
                                case OP_TWO_BODY:
                                    return 233;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 234;
                                case OP_TWO_BODY:
                                    return 235;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 236;
                                case OP_TWO_BODY:
                                    return 237;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 238;
                                case OP_TWO_BODY:
                                    return 239;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 240;
                                case OP_TWO_BODY:
                                    return 241;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 242;
                                case OP_TWO_BODY:
                                    return 243;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 244;
                                case OP_TWO_BODY:
                                    return 245;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 246;
                                case OP_TWO_BODY:
                                    return 247;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 248;
                                case OP_TWO_BODY:
                                    return 249;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 250;
                                case OP_TWO_BODY:
                                    return 251;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 252;
                                case OP_TWO_BODY:
                                    return 253;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 254;
                                case OP_TWO_BODY:
                                    return 255;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 12:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 256;
                                case OP_TWO_BODY:
                                    return 257;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 258;
                                case OP_TWO_BODY:
                                    return 259;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 260;
                                case OP_TWO_BODY:
                                    return 261;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 262;
                                case OP_TWO_BODY:
                                    return 263;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 264;
                                case OP_TWO_BODY:
                                    return 265;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 266;
                                case OP_TWO_BODY:
                                    return 267;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 268;
                                case OP_TWO_BODY:
                                    return 269;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 270;
                                case OP_TWO_BODY:
                                    return 271;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 13:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 272;
                                case OP_TWO_BODY:
                                    return 273;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 274;
                                case OP_TWO_BODY:
                                    return 275;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 276;
                                case OP_TWO_BODY:
                                    return 277;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 278;
                                case OP_TWO_BODY:
                                    return 279;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 280;
                                case OP_TWO_BODY:
                                    return 281;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 282;
                                case OP_TWO_BODY:
                                    return 283;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 284;
                                case OP_TWO_BODY:
                                    return 285;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 286;
                                case OP_TWO_BODY:
                                    return 287;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 288;
                                case OP_TWO_BODY:
                                    return 289;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 290;
                                case OP_TWO_BODY:
                                    return 291;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 292;
                                case OP_TWO_BODY:
                                    return 293;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 294;
                                case OP_TWO_BODY:
                                    return 295;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 14:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 296;
                                case OP_TWO_BODY:
                                    return 297;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 298;
                                case OP_TWO_BODY:
                                    return 299;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 300;
                                case OP_TWO_BODY:
                                    return 301;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 302;
                                case OP_TWO_BODY:
                                    return 303;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 304;
                                case OP_TWO_BODY:
                                    return 305;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 306;
                                case OP_TWO_BODY:
                                    return 307;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 308;
                                case OP_TWO_BODY:
                                    return 309;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 310;
                                case OP_TWO_BODY:
                                    return 311;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 15:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 312;
                                case OP_TWO_BODY:
                                    return 313;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 314;
                                case OP_TWO_BODY:
                                    return 315;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 316;
                                case OP_TWO_BODY:
                                    return 317;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 318;
                                case OP_TWO_BODY:
                                    return 319;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 320;
                                case OP_TWO_BODY:
                                    return 321;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 322;
                                case OP_TWO_BODY:
                                    return 323;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 324;
                                case OP_TWO_BODY:
                                    return 325;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 326;
                                case OP_TWO_BODY:
                                    return 327;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 328;
                                case OP_TWO_BODY:
                                    return 329;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 330;
                                case OP_TWO_BODY:
                                    return 331;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 332;
                                case OP_TWO_BODY:
                                    return 333;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 334;
                                case OP_TWO_BODY:
                                    return 335;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 16:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 336;
                                case OP_TWO_BODY:
                                    return 337;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 338;
                                case OP_TWO_BODY:
                                    return 339;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 340;
                                case OP_TWO_BODY:
                                    return 341;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 342;
                                case OP_TWO_BODY:
                                    return 343;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 344;
                                case OP_TWO_BODY:
                                    return 345;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 346;
                                case OP_TWO_BODY:
                                    return 347;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 348;
                                case OP_TWO_BODY:
                                    return 349;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 350;
                                case OP_TWO_BODY:
                                    return 351;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 17:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 352;
                                case OP_TWO_BODY:
                                    return 353;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 354;
                                case OP_TWO_BODY:
                                    return 355;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 356;
                                case OP_TWO_BODY:
                                    return 357;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 358;
                                case OP_TWO_BODY:
                                    return 359;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 360;
                                case OP_TWO_BODY:
                                    return 361;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 362;
                                case OP_TWO_BODY:
                                    return 363;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 364;
                                case OP_TWO_BODY:
                                    return 365;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 366;
                                case OP_TWO_BODY:
                                    return 367;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 368;
                                case OP_TWO_BODY:
                                    return 369;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 370;
                                case OP_TWO_BODY:
                                    return 371;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 372;
                                case OP_TWO_BODY:
                                    return 373;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 374;
                                case OP_TWO_BODY:
                                    return 375;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 18:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 376;
                                case OP_TWO_BODY:
                                    return 377;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 378;
                                case OP_TWO_BODY:
                                    return 379;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 380;
                                case OP_TWO_BODY:
                                    return 381;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 382;
                                case OP_TWO_BODY:
                                    return 383;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 384;
                                case OP_TWO_BODY:
                                    return 385;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 386;
                                case OP_TWO_BODY:
                                    return 387;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 388;
                                case OP_TWO_BODY:
                                    return 389;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 390;
                                case OP_TWO_BODY:
                                    return 391;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 19:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 392;
                                case OP_TWO_BODY:
                                    return 393;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 394;
                                case OP_TWO_BODY:
                                    return 395;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 396;
                                case OP_TWO_BODY:
                                    return 397;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 398;
                                case OP_TWO_BODY:
                                    return 399;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 400;
                                case OP_TWO_BODY:
                                    return 401;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 402;
                                case OP_TWO_BODY:
                                    return 403;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 404;
                                case OP_TWO_BODY:
                                    return 405;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 406;
                                case OP_TWO_BODY:
                                    return 407;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 408;
                                case OP_TWO_BODY:
                                    return 409;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 410;
                                case OP_TWO_BODY:
                                    return 411;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 412;
                                case OP_TWO_BODY:
                                    return 413;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 414;
                                case OP_TWO_BODY:
                                    return 415;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 20:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 416;
                                case OP_TWO_BODY:
                                    return 417;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 418;
                                case OP_TWO_BODY:
                                    return 419;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 420;
                                case OP_TWO_BODY:
                                    return 421;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 422;
                                case OP_TWO_BODY:
                                    return 423;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 424;
                                case OP_TWO_BODY:
                                    return 425;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 426;
                                case OP_TWO_BODY:
                                    return 427;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 428;
                                case OP_TWO_BODY:
                                    return 429;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 430;
                                case OP_TWO_BODY:
                                    return 431;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 21:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 432;
                                case OP_TWO_BODY:
                                    return 433;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 434;
                                case OP_TWO_BODY:
                                    return 435;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 436;
                                case OP_TWO_BODY:
                                    return 437;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 438;
                                case OP_TWO_BODY:
                                    return 439;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 440;
                                case OP_TWO_BODY:
                                    return 441;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 442;
                                case OP_TWO_BODY:
                                    return 443;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 444;
                                case OP_TWO_BODY:
                                    return 445;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 446;
                                case OP_TWO_BODY:
                                    return 447;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 448;
                                case OP_TWO_BODY:
                                    return 449;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 450;
                                case OP_TWO_BODY:
                                    return 451;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 452;
                                case OP_TWO_BODY:
                                    return 453;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 454;
                                case OP_TWO_BODY:
                                    return 455;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 22:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 456;
                                case OP_TWO_BODY:
                                    return 457;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 458;
                                case OP_TWO_BODY:
                                    return 459;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 460;
                                case OP_TWO_BODY:
                                    return 461;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 462;
                                case OP_TWO_BODY:
                                    return 463;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 464;
                                case OP_TWO_BODY:
                                    return 465;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 466;
                                case OP_TWO_BODY:
                                    return 467;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 468;
                                case OP_TWO_BODY:
                                    return 469;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 470;
                                case OP_TWO_BODY:
                                    return 471;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 23:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 472;
                                case OP_TWO_BODY:
                                    return 473;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 474;
                                case OP_TWO_BODY:
                                    return 475;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 476;
                                case OP_TWO_BODY:
                                    return 477;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 478;
                                case OP_TWO_BODY:
                                    return 479;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 480;
                                case OP_TWO_BODY:
                                    return 481;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 482;
                                case OP_TWO_BODY:
                                    return 483;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 484;
                                case OP_TWO_BODY:
                                    return 485;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 486;
                                case OP_TWO_BODY:
                                    return 487;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 488;
                                case OP_TWO_BODY:
                                    return 489;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 490;
                                case OP_TWO_BODY:
                                    return 491;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 492;
                                case OP_TWO_BODY:
                                    return 493;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 494;
                                case OP_TWO_BODY:
                                    return 495;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 24:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 496;
                                case OP_TWO_BODY:
                                    return 497;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 498;
                                case OP_TWO_BODY:
                                    return 499;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 500;
                                case OP_TWO_BODY:
                                    return 501;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 502;
                                case OP_TWO_BODY:
                                    return 503;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 504;
                                case OP_TWO_BODY:
                                    return 505;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 506;
                                case OP_TWO_BODY:
                                    return 507;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 508;
                                case OP_TWO_BODY:
                                    return 509;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 510;
                                case OP_TWO_BODY:
                                    return 511;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 25:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 512;
                                case OP_TWO_BODY:
                                    return 513;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 514;
                                case OP_TWO_BODY:
                                    return 515;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 516;
                                case OP_TWO_BODY:
                                    return 517;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 518;
                                case OP_TWO_BODY:
                                    return 519;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 520;
                                case OP_TWO_BODY:
                                    return 521;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 522;
                                case OP_TWO_BODY:
                                    return 523;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 524;
                                case OP_TWO_BODY:
                                    return 525;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 526;
                                case OP_TWO_BODY:
                                    return 527;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 528;
                                case OP_TWO_BODY:
                                    return 529;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 530;
                                case OP_TWO_BODY:
                                    return 531;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 532;
                                case OP_TWO_BODY:
                                    return 533;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 534;
                                case OP_TWO_BODY:
                                    return 535;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 26:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 536;
                                case OP_TWO_BODY:
                                    return 537;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 538;
                                case OP_TWO_BODY:
                                    return 539;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 540;
                                case OP_TWO_BODY:
                                    return 541;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 542;
                                case OP_TWO_BODY:
                                    return 543;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 544;
                                case OP_TWO_BODY:
                                    return 545;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 546;
                                case OP_TWO_BODY:
                                    return 547;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 548;
                                case OP_TWO_BODY:
                                    return 549;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 550;
                                case OP_TWO_BODY:
                                    return 551;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            case 27:
                if(0){}
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT32))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 552;
                                case OP_TWO_BODY:
                                    return 553;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 554;
                                case OP_TWO_BODY:
                                    return 555;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 556;
                                case OP_TWO_BODY:
                                    return 557;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 558;
                                case OP_TWO_BODY:
                                    return 559;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 560;
                                case OP_TWO_BODY:
                                    return 561;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 562;
                                case OP_TWO_BODY:
                                    return 563;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else if(PyArray_EquivTypenums(J_typenum,NPY_INT64))
                {
                    switch(T_typenum)
                    {
                        case NPY_INT8:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 564;
                                case OP_TWO_BODY:
                                    return 565;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_INT16:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 566;
                                case OP_TWO_BODY:
                                    return 567;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT32:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 568;
                                case OP_TWO_BODY:
                                    return 569;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_FLOAT64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 570;
                                case OP_TWO_BODY:
                                    return 571;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX64:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 572;
                                case OP_TWO_BODY:
                                    return 573;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        case NPY_COMPLEX128:
                            switch(op_type)
                            {
                                case OP_STRING:
                                    return 574;
                                case OP_TWO_BODY:
                                    return 575;
                                default:
                                    throw std::runtime_error("this message should not show up.");
                            
                            }
                        default:
                            throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                    
                    }
                }
                else {throw std::invalid_argument("expecting value of Index type to be in: [int32, int64]");}
            default:
                throw std::runtime_error("this message should not show up.");
        
        }
    }
    static size_t generate_otf_switch_code(
        const size_t basis_switch_code,
        NPY_TYPES T_typenum,
        NPY_TYPES X_typenum,
        NPY_TYPES Y_typenum,
        OPERATOR_TYPES op_type)
    {
        switch(basis_switch_code)
        {
            case 0:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 0;
                                        case OP_TWO_BODY:
                                            return 1;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 2;
                                        case OP_TWO_BODY:
                                            return 3;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 4;
                                        case OP_TWO_BODY:
                                            return 5;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 6;
                                        case OP_TWO_BODY:
                                            return 7;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 8;
                                        case OP_TWO_BODY:
                                            return 9;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 10;
                                        case OP_TWO_BODY:
                                            return 11;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 12;
                                        case OP_TWO_BODY:
                                            return 13;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 14;
                                        case OP_TWO_BODY:
                                            return 15;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 16;
                                        case OP_TWO_BODY:
                                            return 17;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 18;
                                        case OP_TWO_BODY:
                                            return 19;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 20;
                                        case OP_TWO_BODY:
                                            return 21;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 22;
                                        case OP_TWO_BODY:
                                            return 23;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 24;
                                        case OP_TWO_BODY:
                                            return 25;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 26;
                                        case OP_TWO_BODY:
                                            return 27;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 28;
                                        case OP_TWO_BODY:
                                            return 29;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 30;
                                        case OP_TWO_BODY:
                                            return 31;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 1:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 32;
                                        case OP_TWO_BODY:
                                            return 33;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 34;
                                        case OP_TWO_BODY:
                                            return 35;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 36;
                                        case OP_TWO_BODY:
                                            return 37;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 38;
                                        case OP_TWO_BODY:
                                            return 39;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 40;
                                        case OP_TWO_BODY:
                                            return 41;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 42;
                                        case OP_TWO_BODY:
                                            return 43;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 44;
                                        case OP_TWO_BODY:
                                            return 45;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 46;
                                        case OP_TWO_BODY:
                                            return 47;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 48;
                                        case OP_TWO_BODY:
                                            return 49;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 50;
                                        case OP_TWO_BODY:
                                            return 51;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 52;
                                        case OP_TWO_BODY:
                                            return 53;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 54;
                                        case OP_TWO_BODY:
                                            return 55;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 56;
                                        case OP_TWO_BODY:
                                            return 57;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 58;
                                        case OP_TWO_BODY:
                                            return 59;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 60;
                                        case OP_TWO_BODY:
                                            return 61;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 62;
                                        case OP_TWO_BODY:
                                            return 63;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 2:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 64;
                                        case OP_TWO_BODY:
                                            return 65;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 66;
                                        case OP_TWO_BODY:
                                            return 67;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 68;
                                        case OP_TWO_BODY:
                                            return 69;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 70;
                                        case OP_TWO_BODY:
                                            return 71;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 72;
                                        case OP_TWO_BODY:
                                            return 73;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 74;
                                        case OP_TWO_BODY:
                                            return 75;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 76;
                                        case OP_TWO_BODY:
                                            return 77;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 78;
                                        case OP_TWO_BODY:
                                            return 79;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 80;
                                        case OP_TWO_BODY:
                                            return 81;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 82;
                                        case OP_TWO_BODY:
                                            return 83;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 84;
                                        case OP_TWO_BODY:
                                            return 85;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 86;
                                        case OP_TWO_BODY:
                                            return 87;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 88;
                                        case OP_TWO_BODY:
                                            return 89;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 90;
                                        case OP_TWO_BODY:
                                            return 91;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 92;
                                        case OP_TWO_BODY:
                                            return 93;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 94;
                                        case OP_TWO_BODY:
                                            return 95;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 3:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 96;
                                        case OP_TWO_BODY:
                                            return 97;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 98;
                                        case OP_TWO_BODY:
                                            return 99;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 100;
                                        case OP_TWO_BODY:
                                            return 101;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 102;
                                        case OP_TWO_BODY:
                                            return 103;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 104;
                                        case OP_TWO_BODY:
                                            return 105;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 106;
                                        case OP_TWO_BODY:
                                            return 107;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 108;
                                        case OP_TWO_BODY:
                                            return 109;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 110;
                                        case OP_TWO_BODY:
                                            return 111;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 112;
                                        case OP_TWO_BODY:
                                            return 113;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 114;
                                        case OP_TWO_BODY:
                                            return 115;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 116;
                                        case OP_TWO_BODY:
                                            return 117;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 118;
                                        case OP_TWO_BODY:
                                            return 119;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 120;
                                        case OP_TWO_BODY:
                                            return 121;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 122;
                                        case OP_TWO_BODY:
                                            return 123;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 124;
                                        case OP_TWO_BODY:
                                            return 125;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 126;
                                        case OP_TWO_BODY:
                                            return 127;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 4:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 128;
                                        case OP_TWO_BODY:
                                            return 129;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 130;
                                        case OP_TWO_BODY:
                                            return 131;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 132;
                                        case OP_TWO_BODY:
                                            return 133;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 134;
                                        case OP_TWO_BODY:
                                            return 135;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 136;
                                        case OP_TWO_BODY:
                                            return 137;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 138;
                                        case OP_TWO_BODY:
                                            return 139;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 140;
                                        case OP_TWO_BODY:
                                            return 141;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 142;
                                        case OP_TWO_BODY:
                                            return 143;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 144;
                                        case OP_TWO_BODY:
                                            return 145;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 146;
                                        case OP_TWO_BODY:
                                            return 147;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 148;
                                        case OP_TWO_BODY:
                                            return 149;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 150;
                                        case OP_TWO_BODY:
                                            return 151;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 152;
                                        case OP_TWO_BODY:
                                            return 153;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 154;
                                        case OP_TWO_BODY:
                                            return 155;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 156;
                                        case OP_TWO_BODY:
                                            return 157;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 158;
                                        case OP_TWO_BODY:
                                            return 159;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 5:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 160;
                                        case OP_TWO_BODY:
                                            return 161;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 162;
                                        case OP_TWO_BODY:
                                            return 163;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 164;
                                        case OP_TWO_BODY:
                                            return 165;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 166;
                                        case OP_TWO_BODY:
                                            return 167;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 168;
                                        case OP_TWO_BODY:
                                            return 169;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 170;
                                        case OP_TWO_BODY:
                                            return 171;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 172;
                                        case OP_TWO_BODY:
                                            return 173;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 174;
                                        case OP_TWO_BODY:
                                            return 175;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 176;
                                        case OP_TWO_BODY:
                                            return 177;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 178;
                                        case OP_TWO_BODY:
                                            return 179;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 180;
                                        case OP_TWO_BODY:
                                            return 181;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 182;
                                        case OP_TWO_BODY:
                                            return 183;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 184;
                                        case OP_TWO_BODY:
                                            return 185;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 186;
                                        case OP_TWO_BODY:
                                            return 187;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 188;
                                        case OP_TWO_BODY:
                                            return 189;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 190;
                                        case OP_TWO_BODY:
                                            return 191;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 6:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 192;
                                        case OP_TWO_BODY:
                                            return 193;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 194;
                                        case OP_TWO_BODY:
                                            return 195;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 196;
                                        case OP_TWO_BODY:
                                            return 197;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 198;
                                        case OP_TWO_BODY:
                                            return 199;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 200;
                                        case OP_TWO_BODY:
                                            return 201;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 202;
                                        case OP_TWO_BODY:
                                            return 203;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 204;
                                        case OP_TWO_BODY:
                                            return 205;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 206;
                                        case OP_TWO_BODY:
                                            return 207;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 208;
                                        case OP_TWO_BODY:
                                            return 209;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 210;
                                        case OP_TWO_BODY:
                                            return 211;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 212;
                                        case OP_TWO_BODY:
                                            return 213;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 214;
                                        case OP_TWO_BODY:
                                            return 215;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 216;
                                        case OP_TWO_BODY:
                                            return 217;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 218;
                                        case OP_TWO_BODY:
                                            return 219;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 220;
                                        case OP_TWO_BODY:
                                            return 221;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 222;
                                        case OP_TWO_BODY:
                                            return 223;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 7:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 224;
                                        case OP_TWO_BODY:
                                            return 225;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 226;
                                        case OP_TWO_BODY:
                                            return 227;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 228;
                                        case OP_TWO_BODY:
                                            return 229;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 230;
                                        case OP_TWO_BODY:
                                            return 231;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 232;
                                        case OP_TWO_BODY:
                                            return 233;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 234;
                                        case OP_TWO_BODY:
                                            return 235;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 236;
                                        case OP_TWO_BODY:
                                            return 237;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 238;
                                        case OP_TWO_BODY:
                                            return 239;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 240;
                                        case OP_TWO_BODY:
                                            return 241;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 242;
                                        case OP_TWO_BODY:
                                            return 243;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 244;
                                        case OP_TWO_BODY:
                                            return 245;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 246;
                                        case OP_TWO_BODY:
                                            return 247;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 248;
                                        case OP_TWO_BODY:
                                            return 249;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 250;
                                        case OP_TWO_BODY:
                                            return 251;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 252;
                                        case OP_TWO_BODY:
                                            return 253;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 254;
                                        case OP_TWO_BODY:
                                            return 255;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 8:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 256;
                                        case OP_TWO_BODY:
                                            return 257;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 258;
                                        case OP_TWO_BODY:
                                            return 259;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 260;
                                        case OP_TWO_BODY:
                                            return 261;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 262;
                                        case OP_TWO_BODY:
                                            return 263;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 264;
                                        case OP_TWO_BODY:
                                            return 265;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 266;
                                        case OP_TWO_BODY:
                                            return 267;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 268;
                                        case OP_TWO_BODY:
                                            return 269;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 270;
                                        case OP_TWO_BODY:
                                            return 271;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 272;
                                        case OP_TWO_BODY:
                                            return 273;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 274;
                                        case OP_TWO_BODY:
                                            return 275;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 276;
                                        case OP_TWO_BODY:
                                            return 277;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 278;
                                        case OP_TWO_BODY:
                                            return 279;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 280;
                                        case OP_TWO_BODY:
                                            return 281;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 282;
                                        case OP_TWO_BODY:
                                            return 283;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 284;
                                        case OP_TWO_BODY:
                                            return 285;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 286;
                                        case OP_TWO_BODY:
                                            return 287;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 9:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 288;
                                        case OP_TWO_BODY:
                                            return 289;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 290;
                                        case OP_TWO_BODY:
                                            return 291;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 292;
                                        case OP_TWO_BODY:
                                            return 293;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 294;
                                        case OP_TWO_BODY:
                                            return 295;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 296;
                                        case OP_TWO_BODY:
                                            return 297;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 298;
                                        case OP_TWO_BODY:
                                            return 299;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 300;
                                        case OP_TWO_BODY:
                                            return 301;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 302;
                                        case OP_TWO_BODY:
                                            return 303;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 304;
                                        case OP_TWO_BODY:
                                            return 305;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 306;
                                        case OP_TWO_BODY:
                                            return 307;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 308;
                                        case OP_TWO_BODY:
                                            return 309;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 310;
                                        case OP_TWO_BODY:
                                            return 311;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 312;
                                        case OP_TWO_BODY:
                                            return 313;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 314;
                                        case OP_TWO_BODY:
                                            return 315;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 316;
                                        case OP_TWO_BODY:
                                            return 317;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 318;
                                        case OP_TWO_BODY:
                                            return 319;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 10:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 320;
                                        case OP_TWO_BODY:
                                            return 321;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 322;
                                        case OP_TWO_BODY:
                                            return 323;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 324;
                                        case OP_TWO_BODY:
                                            return 325;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 326;
                                        case OP_TWO_BODY:
                                            return 327;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 328;
                                        case OP_TWO_BODY:
                                            return 329;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 330;
                                        case OP_TWO_BODY:
                                            return 331;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 332;
                                        case OP_TWO_BODY:
                                            return 333;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 334;
                                        case OP_TWO_BODY:
                                            return 335;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 336;
                                        case OP_TWO_BODY:
                                            return 337;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 338;
                                        case OP_TWO_BODY:
                                            return 339;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 340;
                                        case OP_TWO_BODY:
                                            return 341;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 342;
                                        case OP_TWO_BODY:
                                            return 343;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 344;
                                        case OP_TWO_BODY:
                                            return 345;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 346;
                                        case OP_TWO_BODY:
                                            return 347;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 348;
                                        case OP_TWO_BODY:
                                            return 349;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 350;
                                        case OP_TWO_BODY:
                                            return 351;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 11:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 352;
                                        case OP_TWO_BODY:
                                            return 353;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 354;
                                        case OP_TWO_BODY:
                                            return 355;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 356;
                                        case OP_TWO_BODY:
                                            return 357;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 358;
                                        case OP_TWO_BODY:
                                            return 359;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 360;
                                        case OP_TWO_BODY:
                                            return 361;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 362;
                                        case OP_TWO_BODY:
                                            return 363;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 364;
                                        case OP_TWO_BODY:
                                            return 365;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 366;
                                        case OP_TWO_BODY:
                                            return 367;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 368;
                                        case OP_TWO_BODY:
                                            return 369;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 370;
                                        case OP_TWO_BODY:
                                            return 371;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 372;
                                        case OP_TWO_BODY:
                                            return 373;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 374;
                                        case OP_TWO_BODY:
                                            return 375;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 376;
                                        case OP_TWO_BODY:
                                            return 377;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 378;
                                        case OP_TWO_BODY:
                                            return 379;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 380;
                                        case OP_TWO_BODY:
                                            return 381;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 382;
                                        case OP_TWO_BODY:
                                            return 383;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 12:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 384;
                                        case OP_TWO_BODY:
                                            return 385;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 386;
                                        case OP_TWO_BODY:
                                            return 387;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 388;
                                        case OP_TWO_BODY:
                                            return 389;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 390;
                                        case OP_TWO_BODY:
                                            return 391;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 392;
                                        case OP_TWO_BODY:
                                            return 393;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 394;
                                        case OP_TWO_BODY:
                                            return 395;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 396;
                                        case OP_TWO_BODY:
                                            return 397;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 398;
                                        case OP_TWO_BODY:
                                            return 399;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 400;
                                        case OP_TWO_BODY:
                                            return 401;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 402;
                                        case OP_TWO_BODY:
                                            return 403;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 404;
                                        case OP_TWO_BODY:
                                            return 405;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 406;
                                        case OP_TWO_BODY:
                                            return 407;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 408;
                                        case OP_TWO_BODY:
                                            return 409;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 410;
                                        case OP_TWO_BODY:
                                            return 411;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 412;
                                        case OP_TWO_BODY:
                                            return 413;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 414;
                                        case OP_TWO_BODY:
                                            return 415;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 13:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 416;
                                        case OP_TWO_BODY:
                                            return 417;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 418;
                                        case OP_TWO_BODY:
                                            return 419;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 420;
                                        case OP_TWO_BODY:
                                            return 421;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 422;
                                        case OP_TWO_BODY:
                                            return 423;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 424;
                                        case OP_TWO_BODY:
                                            return 425;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 426;
                                        case OP_TWO_BODY:
                                            return 427;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 428;
                                        case OP_TWO_BODY:
                                            return 429;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 430;
                                        case OP_TWO_BODY:
                                            return 431;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 432;
                                        case OP_TWO_BODY:
                                            return 433;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 434;
                                        case OP_TWO_BODY:
                                            return 435;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 436;
                                        case OP_TWO_BODY:
                                            return 437;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 438;
                                        case OP_TWO_BODY:
                                            return 439;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 440;
                                        case OP_TWO_BODY:
                                            return 441;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 442;
                                        case OP_TWO_BODY:
                                            return 443;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 444;
                                        case OP_TWO_BODY:
                                            return 445;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 446;
                                        case OP_TWO_BODY:
                                            return 447;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 14:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 448;
                                        case OP_TWO_BODY:
                                            return 449;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 450;
                                        case OP_TWO_BODY:
                                            return 451;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 452;
                                        case OP_TWO_BODY:
                                            return 453;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 454;
                                        case OP_TWO_BODY:
                                            return 455;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 456;
                                        case OP_TWO_BODY:
                                            return 457;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 458;
                                        case OP_TWO_BODY:
                                            return 459;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 460;
                                        case OP_TWO_BODY:
                                            return 461;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 462;
                                        case OP_TWO_BODY:
                                            return 463;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 464;
                                        case OP_TWO_BODY:
                                            return 465;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 466;
                                        case OP_TWO_BODY:
                                            return 467;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 468;
                                        case OP_TWO_BODY:
                                            return 469;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 470;
                                        case OP_TWO_BODY:
                                            return 471;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 472;
                                        case OP_TWO_BODY:
                                            return 473;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 474;
                                        case OP_TWO_BODY:
                                            return 475;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 476;
                                        case OP_TWO_BODY:
                                            return 477;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 478;
                                        case OP_TWO_BODY:
                                            return 479;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 15:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 480;
                                        case OP_TWO_BODY:
                                            return 481;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 482;
                                        case OP_TWO_BODY:
                                            return 483;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 484;
                                        case OP_TWO_BODY:
                                            return 485;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 486;
                                        case OP_TWO_BODY:
                                            return 487;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 488;
                                        case OP_TWO_BODY:
                                            return 489;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 490;
                                        case OP_TWO_BODY:
                                            return 491;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 492;
                                        case OP_TWO_BODY:
                                            return 493;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 494;
                                        case OP_TWO_BODY:
                                            return 495;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 496;
                                        case OP_TWO_BODY:
                                            return 497;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 498;
                                        case OP_TWO_BODY:
                                            return 499;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 500;
                                        case OP_TWO_BODY:
                                            return 501;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 502;
                                        case OP_TWO_BODY:
                                            return 503;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 504;
                                        case OP_TWO_BODY:
                                            return 505;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 506;
                                        case OP_TWO_BODY:
                                            return 507;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 508;
                                        case OP_TWO_BODY:
                                            return 509;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 510;
                                        case OP_TWO_BODY:
                                            return 511;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 16:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 512;
                                        case OP_TWO_BODY:
                                            return 513;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 514;
                                        case OP_TWO_BODY:
                                            return 515;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 516;
                                        case OP_TWO_BODY:
                                            return 517;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 518;
                                        case OP_TWO_BODY:
                                            return 519;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 520;
                                        case OP_TWO_BODY:
                                            return 521;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 522;
                                        case OP_TWO_BODY:
                                            return 523;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 524;
                                        case OP_TWO_BODY:
                                            return 525;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 526;
                                        case OP_TWO_BODY:
                                            return 527;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 528;
                                        case OP_TWO_BODY:
                                            return 529;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 530;
                                        case OP_TWO_BODY:
                                            return 531;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 532;
                                        case OP_TWO_BODY:
                                            return 533;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 534;
                                        case OP_TWO_BODY:
                                            return 535;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 536;
                                        case OP_TWO_BODY:
                                            return 537;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 538;
                                        case OP_TWO_BODY:
                                            return 539;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 540;
                                        case OP_TWO_BODY:
                                            return 541;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 542;
                                        case OP_TWO_BODY:
                                            return 543;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 17:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 544;
                                        case OP_TWO_BODY:
                                            return 545;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 546;
                                        case OP_TWO_BODY:
                                            return 547;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 548;
                                        case OP_TWO_BODY:
                                            return 549;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 550;
                                        case OP_TWO_BODY:
                                            return 551;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 552;
                                        case OP_TWO_BODY:
                                            return 553;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 554;
                                        case OP_TWO_BODY:
                                            return 555;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 556;
                                        case OP_TWO_BODY:
                                            return 557;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 558;
                                        case OP_TWO_BODY:
                                            return 559;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 560;
                                        case OP_TWO_BODY:
                                            return 561;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 562;
                                        case OP_TWO_BODY:
                                            return 563;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 564;
                                        case OP_TWO_BODY:
                                            return 565;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 566;
                                        case OP_TWO_BODY:
                                            return 567;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 568;
                                        case OP_TWO_BODY:
                                            return 569;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 570;
                                        case OP_TWO_BODY:
                                            return 571;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 572;
                                        case OP_TWO_BODY:
                                            return 573;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 574;
                                        case OP_TWO_BODY:
                                            return 575;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 18:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 576;
                                        case OP_TWO_BODY:
                                            return 577;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 578;
                                        case OP_TWO_BODY:
                                            return 579;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 580;
                                        case OP_TWO_BODY:
                                            return 581;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 582;
                                        case OP_TWO_BODY:
                                            return 583;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 584;
                                        case OP_TWO_BODY:
                                            return 585;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 586;
                                        case OP_TWO_BODY:
                                            return 587;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 588;
                                        case OP_TWO_BODY:
                                            return 589;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 590;
                                        case OP_TWO_BODY:
                                            return 591;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 592;
                                        case OP_TWO_BODY:
                                            return 593;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 594;
                                        case OP_TWO_BODY:
                                            return 595;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 596;
                                        case OP_TWO_BODY:
                                            return 597;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 598;
                                        case OP_TWO_BODY:
                                            return 599;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 600;
                                        case OP_TWO_BODY:
                                            return 601;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 602;
                                        case OP_TWO_BODY:
                                            return 603;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 604;
                                        case OP_TWO_BODY:
                                            return 605;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 606;
                                        case OP_TWO_BODY:
                                            return 607;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 19:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 608;
                                        case OP_TWO_BODY:
                                            return 609;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 610;
                                        case OP_TWO_BODY:
                                            return 611;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 612;
                                        case OP_TWO_BODY:
                                            return 613;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 614;
                                        case OP_TWO_BODY:
                                            return 615;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 616;
                                        case OP_TWO_BODY:
                                            return 617;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 618;
                                        case OP_TWO_BODY:
                                            return 619;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 620;
                                        case OP_TWO_BODY:
                                            return 621;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 622;
                                        case OP_TWO_BODY:
                                            return 623;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 624;
                                        case OP_TWO_BODY:
                                            return 625;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 626;
                                        case OP_TWO_BODY:
                                            return 627;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 628;
                                        case OP_TWO_BODY:
                                            return 629;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 630;
                                        case OP_TWO_BODY:
                                            return 631;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 632;
                                        case OP_TWO_BODY:
                                            return 633;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 634;
                                        case OP_TWO_BODY:
                                            return 635;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 636;
                                        case OP_TWO_BODY:
                                            return 637;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 638;
                                        case OP_TWO_BODY:
                                            return 639;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 20:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 640;
                                        case OP_TWO_BODY:
                                            return 641;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 642;
                                        case OP_TWO_BODY:
                                            return 643;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 644;
                                        case OP_TWO_BODY:
                                            return 645;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 646;
                                        case OP_TWO_BODY:
                                            return 647;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 648;
                                        case OP_TWO_BODY:
                                            return 649;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 650;
                                        case OP_TWO_BODY:
                                            return 651;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 652;
                                        case OP_TWO_BODY:
                                            return 653;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 654;
                                        case OP_TWO_BODY:
                                            return 655;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 656;
                                        case OP_TWO_BODY:
                                            return 657;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 658;
                                        case OP_TWO_BODY:
                                            return 659;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 660;
                                        case OP_TWO_BODY:
                                            return 661;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 662;
                                        case OP_TWO_BODY:
                                            return 663;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 664;
                                        case OP_TWO_BODY:
                                            return 665;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 666;
                                        case OP_TWO_BODY:
                                            return 667;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 668;
                                        case OP_TWO_BODY:
                                            return 669;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 670;
                                        case OP_TWO_BODY:
                                            return 671;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 21:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 672;
                                        case OP_TWO_BODY:
                                            return 673;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 674;
                                        case OP_TWO_BODY:
                                            return 675;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 676;
                                        case OP_TWO_BODY:
                                            return 677;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 678;
                                        case OP_TWO_BODY:
                                            return 679;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 680;
                                        case OP_TWO_BODY:
                                            return 681;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 682;
                                        case OP_TWO_BODY:
                                            return 683;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 684;
                                        case OP_TWO_BODY:
                                            return 685;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 686;
                                        case OP_TWO_BODY:
                                            return 687;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 688;
                                        case OP_TWO_BODY:
                                            return 689;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 690;
                                        case OP_TWO_BODY:
                                            return 691;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 692;
                                        case OP_TWO_BODY:
                                            return 693;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 694;
                                        case OP_TWO_BODY:
                                            return 695;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 696;
                                        case OP_TWO_BODY:
                                            return 697;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 698;
                                        case OP_TWO_BODY:
                                            return 699;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 700;
                                        case OP_TWO_BODY:
                                            return 701;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 702;
                                        case OP_TWO_BODY:
                                            return 703;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 22:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 704;
                                        case OP_TWO_BODY:
                                            return 705;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 706;
                                        case OP_TWO_BODY:
                                            return 707;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 708;
                                        case OP_TWO_BODY:
                                            return 709;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 710;
                                        case OP_TWO_BODY:
                                            return 711;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 712;
                                        case OP_TWO_BODY:
                                            return 713;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 714;
                                        case OP_TWO_BODY:
                                            return 715;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 716;
                                        case OP_TWO_BODY:
                                            return 717;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 718;
                                        case OP_TWO_BODY:
                                            return 719;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 720;
                                        case OP_TWO_BODY:
                                            return 721;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 722;
                                        case OP_TWO_BODY:
                                            return 723;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 724;
                                        case OP_TWO_BODY:
                                            return 725;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 726;
                                        case OP_TWO_BODY:
                                            return 727;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 728;
                                        case OP_TWO_BODY:
                                            return 729;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 730;
                                        case OP_TWO_BODY:
                                            return 731;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 732;
                                        case OP_TWO_BODY:
                                            return 733;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 734;
                                        case OP_TWO_BODY:
                                            return 735;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 23:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 736;
                                        case OP_TWO_BODY:
                                            return 737;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 738;
                                        case OP_TWO_BODY:
                                            return 739;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 740;
                                        case OP_TWO_BODY:
                                            return 741;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 742;
                                        case OP_TWO_BODY:
                                            return 743;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 744;
                                        case OP_TWO_BODY:
                                            return 745;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 746;
                                        case OP_TWO_BODY:
                                            return 747;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 748;
                                        case OP_TWO_BODY:
                                            return 749;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 750;
                                        case OP_TWO_BODY:
                                            return 751;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 752;
                                        case OP_TWO_BODY:
                                            return 753;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 754;
                                        case OP_TWO_BODY:
                                            return 755;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 756;
                                        case OP_TWO_BODY:
                                            return 757;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 758;
                                        case OP_TWO_BODY:
                                            return 759;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 760;
                                        case OP_TWO_BODY:
                                            return 761;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 762;
                                        case OP_TWO_BODY:
                                            return 763;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 764;
                                        case OP_TWO_BODY:
                                            return 765;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 766;
                                        case OP_TWO_BODY:
                                            return 767;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 24:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 768;
                                        case OP_TWO_BODY:
                                            return 769;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 770;
                                        case OP_TWO_BODY:
                                            return 771;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 772;
                                        case OP_TWO_BODY:
                                            return 773;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 774;
                                        case OP_TWO_BODY:
                                            return 775;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 776;
                                        case OP_TWO_BODY:
                                            return 777;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 778;
                                        case OP_TWO_BODY:
                                            return 779;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 780;
                                        case OP_TWO_BODY:
                                            return 781;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 782;
                                        case OP_TWO_BODY:
                                            return 783;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 784;
                                        case OP_TWO_BODY:
                                            return 785;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 786;
                                        case OP_TWO_BODY:
                                            return 787;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 788;
                                        case OP_TWO_BODY:
                                            return 789;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 790;
                                        case OP_TWO_BODY:
                                            return 791;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 792;
                                        case OP_TWO_BODY:
                                            return 793;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 794;
                                        case OP_TWO_BODY:
                                            return 795;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 796;
                                        case OP_TWO_BODY:
                                            return 797;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 798;
                                        case OP_TWO_BODY:
                                            return 799;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 25:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 800;
                                        case OP_TWO_BODY:
                                            return 801;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 802;
                                        case OP_TWO_BODY:
                                            return 803;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 804;
                                        case OP_TWO_BODY:
                                            return 805;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 806;
                                        case OP_TWO_BODY:
                                            return 807;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 808;
                                        case OP_TWO_BODY:
                                            return 809;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 810;
                                        case OP_TWO_BODY:
                                            return 811;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 812;
                                        case OP_TWO_BODY:
                                            return 813;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 814;
                                        case OP_TWO_BODY:
                                            return 815;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 816;
                                        case OP_TWO_BODY:
                                            return 817;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 818;
                                        case OP_TWO_BODY:
                                            return 819;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 820;
                                        case OP_TWO_BODY:
                                            return 821;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 822;
                                        case OP_TWO_BODY:
                                            return 823;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 824;
                                        case OP_TWO_BODY:
                                            return 825;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 826;
                                        case OP_TWO_BODY:
                                            return 827;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 828;
                                        case OP_TWO_BODY:
                                            return 829;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 830;
                                        case OP_TWO_BODY:
                                            return 831;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 26:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 832;
                                        case OP_TWO_BODY:
                                            return 833;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 834;
                                        case OP_TWO_BODY:
                                            return 835;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 836;
                                        case OP_TWO_BODY:
                                            return 837;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 838;
                                        case OP_TWO_BODY:
                                            return 839;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 840;
                                        case OP_TWO_BODY:
                                            return 841;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 842;
                                        case OP_TWO_BODY:
                                            return 843;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 844;
                                        case OP_TWO_BODY:
                                            return 845;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 846;
                                        case OP_TWO_BODY:
                                            return 847;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 848;
                                        case OP_TWO_BODY:
                                            return 849;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 850;
                                        case OP_TWO_BODY:
                                            return 851;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 852;
                                        case OP_TWO_BODY:
                                            return 853;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 854;
                                        case OP_TWO_BODY:
                                            return 855;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 856;
                                        case OP_TWO_BODY:
                                            return 857;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 858;
                                        case OP_TWO_BODY:
                                            return 859;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 860;
                                        case OP_TWO_BODY:
                                            return 861;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 862;
                                        case OP_TWO_BODY:
                                            return 863;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 27:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT32)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 864;
                                        case OP_TWO_BODY:
                                            return 865;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float32]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 866;
                                        case OP_TWO_BODY:
                                            return 867;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 868;
                                        case OP_TWO_BODY:
                                            return 869;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 870;
                                        case OP_TWO_BODY:
                                            return 871;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_FLOAT64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 872;
                                        case OP_TWO_BODY:
                                            return 873;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_FLOAT64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 874;
                                        case OP_TWO_BODY:
                                            return 875;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [float64]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 876;
                                        case OP_TWO_BODY:
                                            return 877;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 878;
                                        case OP_TWO_BODY:
                                            return 879;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 880;
                                        case OP_TWO_BODY:
                                            return 881;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 882;
                                        case OP_TWO_BODY:
                                            return 883;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX64)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 884;
                                        case OP_TWO_BODY:
                                            return 885;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex64]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 886;
                                        case OP_TWO_BODY:
                                            return 887;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(X_typenum)
                        {
                            case NPY_FLOAT32:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 888;
                                        case OP_TWO_BODY:
                                            return 889;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_FLOAT64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 890;
                                        case OP_TWO_BODY:
                                            return 891;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX64:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 892;
                                        case OP_TWO_BODY:
                                            return 893;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            case NPY_COMPLEX128:
                                if(Y_typenum == NPY_COMPLEX128)
                                {
                                    switch(op_type)
                                    {
                                        case OP_STRING:
                                            return 894;
                                        case OP_TWO_BODY:
                                            return 895;
                                        default:
                                            throw std::runtime_error("this message should not show up.");
                                    
                                    }
                                }
                                else{throw std::invalid_argument("expecting value of output dtype to be in: [complex128]");}
                            default:
                                throw std::invalid_argument("expecting value of input dtype to be in: [complex128]");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            default:
                throw std::runtime_error("this message should not appear.");
        
        }
    }
    static size_t generate_build_subspace_switch_code(
        const size_t basis_switch_code,
        NPY_TYPES T_typenum,
        OPERATOR_TYPES op_type)
    {
        switch(basis_switch_code)
        {
            case 0:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 0;
                            case OP_TWO_BODY:
                                return 1;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 2;
                            case OP_TWO_BODY:
                                return 3;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 4;
                            case OP_TWO_BODY:
                                return 5;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 6;
                            case OP_TWO_BODY:
                                return 7;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 1:
                throw std::runtime_error("there is no subspace to build.");
            case 2:
                switch(T_typenum)
                {
                    case NPY_INT8:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 8;
                            case OP_TWO_BODY:
                                return 9;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_INT16:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 10;
                            case OP_TWO_BODY:
                                return 11;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 12;
                            case OP_TWO_BODY:
                                return 13;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 14;
                            case OP_TWO_BODY:
                                return 15;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 16;
                            case OP_TWO_BODY:
                                return 17;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 18;
                            case OP_TWO_BODY:
                                return 19;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 3:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 20;
                            case OP_TWO_BODY:
                                return 21;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 22;
                            case OP_TWO_BODY:
                                return 23;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 24;
                            case OP_TWO_BODY:
                                return 25;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 26;
                            case OP_TWO_BODY:
                                return 27;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 4:
                throw std::runtime_error("there is no subspace to build.");
            case 5:
                switch(T_typenum)
                {
                    case NPY_INT8:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 28;
                            case OP_TWO_BODY:
                                return 29;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_INT16:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 30;
                            case OP_TWO_BODY:
                                return 31;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 32;
                            case OP_TWO_BODY:
                                return 33;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 34;
                            case OP_TWO_BODY:
                                return 35;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 36;
                            case OP_TWO_BODY:
                                return 37;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 38;
                            case OP_TWO_BODY:
                                return 39;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 6:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 40;
                            case OP_TWO_BODY:
                                return 41;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 42;
                            case OP_TWO_BODY:
                                return 43;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 44;
                            case OP_TWO_BODY:
                                return 45;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 46;
                            case OP_TWO_BODY:
                                return 47;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 7:
                throw std::runtime_error("there is no subspace to build.");
            case 8:
                switch(T_typenum)
                {
                    case NPY_INT8:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 48;
                            case OP_TWO_BODY:
                                return 49;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_INT16:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 50;
                            case OP_TWO_BODY:
                                return 51;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 52;
                            case OP_TWO_BODY:
                                return 53;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 54;
                            case OP_TWO_BODY:
                                return 55;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 56;
                            case OP_TWO_BODY:
                                return 57;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 58;
                            case OP_TWO_BODY:
                                return 59;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 9:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 60;
                            case OP_TWO_BODY:
                                return 61;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 62;
                            case OP_TWO_BODY:
                                return 63;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 64;
                            case OP_TWO_BODY:
                                return 65;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 66;
                            case OP_TWO_BODY:
                                return 67;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 10:
                throw std::runtime_error("there is no subspace to build.");
            case 11:
                switch(T_typenum)
                {
                    case NPY_INT8:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 68;
                            case OP_TWO_BODY:
                                return 69;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_INT16:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 70;
                            case OP_TWO_BODY:
                                return 71;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 72;
                            case OP_TWO_BODY:
                                return 73;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 74;
                            case OP_TWO_BODY:
                                return 75;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 76;
                            case OP_TWO_BODY:
                                return 77;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 78;
                            case OP_TWO_BODY:
                                return 79;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 12:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 80;
                            case OP_TWO_BODY:
                                return 81;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 82;
                            case OP_TWO_BODY:
                                return 83;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 84;
                            case OP_TWO_BODY:
                                return 85;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 86;
                            case OP_TWO_BODY:
                                return 87;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 13:
                switch(T_typenum)
                {
                    case NPY_INT8:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 88;
                            case OP_TWO_BODY:
                                return 89;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_INT16:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 90;
                            case OP_TWO_BODY:
                                return 91;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 92;
                            case OP_TWO_BODY:
                                return 93;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 94;
                            case OP_TWO_BODY:
                                return 95;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 96;
                            case OP_TWO_BODY:
                                return 97;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 98;
                            case OP_TWO_BODY:
                                return 99;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 14:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 100;
                            case OP_TWO_BODY:
                                return 101;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 102;
                            case OP_TWO_BODY:
                                return 103;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 104;
                            case OP_TWO_BODY:
                                return 105;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 106;
                            case OP_TWO_BODY:
                                return 107;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 15:
                switch(T_typenum)
                {
                    case NPY_INT8:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 108;
                            case OP_TWO_BODY:
                                return 109;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_INT16:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 110;
                            case OP_TWO_BODY:
                                return 111;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 112;
                            case OP_TWO_BODY:
                                return 113;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 114;
                            case OP_TWO_BODY:
                                return 115;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 116;
                            case OP_TWO_BODY:
                                return 117;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 118;
                            case OP_TWO_BODY:
                                return 119;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 16:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 120;
                            case OP_TWO_BODY:
                                return 121;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 122;
                            case OP_TWO_BODY:
                                return 123;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 124;
                            case OP_TWO_BODY:
                                return 125;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 126;
                            case OP_TWO_BODY:
                                return 127;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 17:
                switch(T_typenum)
                {
                    case NPY_INT8:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 128;
                            case OP_TWO_BODY:
                                return 129;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_INT16:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 130;
                            case OP_TWO_BODY:
                                return 131;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 132;
                            case OP_TWO_BODY:
                                return 133;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 134;
                            case OP_TWO_BODY:
                                return 135;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 136;
                            case OP_TWO_BODY:
                                return 137;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 138;
                            case OP_TWO_BODY:
                                return 139;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 18:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 140;
                            case OP_TWO_BODY:
                                return 141;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 142;
                            case OP_TWO_BODY:
                                return 143;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 144;
                            case OP_TWO_BODY:
                                return 145;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 146;
                            case OP_TWO_BODY:
                                return 147;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 19:
                switch(T_typenum)
                {
                    case NPY_INT8:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 148;
                            case OP_TWO_BODY:
                                return 149;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_INT16:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 150;
                            case OP_TWO_BODY:
                                return 151;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 152;
                            case OP_TWO_BODY:
                                return 153;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 154;
                            case OP_TWO_BODY:
                                return 155;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 156;
                            case OP_TWO_BODY:
                                return 157;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 158;
                            case OP_TWO_BODY:
                                return 159;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 20:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 160;
                            case OP_TWO_BODY:
                                return 161;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 162;
                            case OP_TWO_BODY:
                                return 163;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 164;
                            case OP_TWO_BODY:
                                return 165;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 166;
                            case OP_TWO_BODY:
                                return 167;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 21:
                switch(T_typenum)
                {
                    case NPY_INT8:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 168;
                            case OP_TWO_BODY:
                                return 169;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_INT16:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 170;
                            case OP_TWO_BODY:
                                return 171;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 172;
                            case OP_TWO_BODY:
                                return 173;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 174;
                            case OP_TWO_BODY:
                                return 175;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 176;
                            case OP_TWO_BODY:
                                return 177;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 178;
                            case OP_TWO_BODY:
                                return 179;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 22:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 180;
                            case OP_TWO_BODY:
                                return 181;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 182;
                            case OP_TWO_BODY:
                                return 183;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 184;
                            case OP_TWO_BODY:
                                return 185;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 186;
                            case OP_TWO_BODY:
                                return 187;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 23:
                switch(T_typenum)
                {
                    case NPY_INT8:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 188;
                            case OP_TWO_BODY:
                                return 189;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_INT16:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 190;
                            case OP_TWO_BODY:
                                return 191;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 192;
                            case OP_TWO_BODY:
                                return 193;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 194;
                            case OP_TWO_BODY:
                                return 195;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 196;
                            case OP_TWO_BODY:
                                return 197;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 198;
                            case OP_TWO_BODY:
                                return 199;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 24:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 200;
                            case OP_TWO_BODY:
                                return 201;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 202;
                            case OP_TWO_BODY:
                                return 203;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 204;
                            case OP_TWO_BODY:
                                return 205;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 206;
                            case OP_TWO_BODY:
                                return 207;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 25:
                switch(T_typenum)
                {
                    case NPY_INT8:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 208;
                            case OP_TWO_BODY:
                                return 209;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_INT16:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 210;
                            case OP_TWO_BODY:
                                return 211;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 212;
                            case OP_TWO_BODY:
                                return 213;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 214;
                            case OP_TWO_BODY:
                                return 215;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 216;
                            case OP_TWO_BODY:
                                return 217;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 218;
                            case OP_TWO_BODY:
                                return 219;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            case 26:
                switch(T_typenum)
                {
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 220;
                            case OP_TWO_BODY:
                                return 221;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 222;
                            case OP_TWO_BODY:
                                return 223;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 224;
                            case OP_TWO_BODY:
                                return 225;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 226;
                            case OP_TWO_BODY:
                                return 227;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [float32, float64, complex64, or complex128]");
                
                }
            case 27:
                switch(T_typenum)
                {
                    case NPY_INT8:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 228;
                            case OP_TWO_BODY:
                                return 229;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_INT16:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 230;
                            case OP_TWO_BODY:
                                return 231;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT32:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 232;
                            case OP_TWO_BODY:
                                return 233;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_FLOAT64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 234;
                            case OP_TWO_BODY:
                                return 235;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX64:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 236;
                            case OP_TWO_BODY:
                                return 237;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    case NPY_COMPLEX128:
                        switch(op_type)
                        {
                            case OP_STRING:
                                return 238;
                            case OP_TWO_BODY:
                                return 239;
                            default:
                                throw std::runtime_error("this message should not show up.");
                        
                        }
                    default:
                        throw std::invalid_argument("expecting value of Operator dtype to be in: [int8, int16, float32, float64, complex64, or complex128]");
                
                }
            default:
                throw std::runtime_error("this message should not show up.");
        
        }
    }

public:

    bosonic_basis_abi(
        const size_t _bits,
        const int _lhss,
        const bool fullspace,
        symmetry_abi& _symmetry,
        const size_t Ns = 0) : lhss(_lhss),basis_switch_code(generate_basis_switch_code(_bits,_lhss,_symmetry.get(),fullspace))
    {
        switch(basis_switch_code)
        {
            case 0:
                {
                    std::shared_ptr<bit_subspace_32> space = std::make_shared<bit_subspace_32>(Ns,_lhss);
                    std::shared_ptr<bit_symmetry<quspin::basis::uint32_t>> symmetry = std::reinterpret_pointer_cast<bit_symmetry<quspin::basis::uint32_t>>(_symmetry.data());
                    std::shared_ptr<symmetric_bitbasis_32> _basis_ptr = std::make_shared<symmetric_bitbasis_32>(*symmetry,space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 1:
                {
                    std::shared_ptr<bit_fullspace_32> space = std::make_shared<bit_fullspace_32>(Ns,_lhss);
                    std::shared_ptr<fullspace_bitbasis_32> _basis_ptr = std::make_shared<fullspace_bitbasis_32>(space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 2:
                {
                    std::shared_ptr<bit_subspace_32> space = std::make_shared<bit_subspace_32>(Ns,_lhss);
                    std::shared_ptr<subspace_bitbasis_32> _basis_ptr = std::make_shared<subspace_bitbasis_32>(space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 3:
                {
                    std::shared_ptr<dit_subspace_32> space = std::make_shared<dit_subspace_32>(Ns,_lhss);
                    std::shared_ptr<dit_symmetry<quspin::basis::uint32_t>> symmetry = std::reinterpret_pointer_cast<dit_symmetry<quspin::basis::uint32_t>>(_symmetry.data());
                    std::shared_ptr<symmetric_ditbasis_32> _basis_ptr = std::make_shared<symmetric_ditbasis_32>(*symmetry,space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 4:
                {
                    std::shared_ptr<dit_fullspace_32> space = std::make_shared<dit_fullspace_32>(Ns,_lhss);
                    std::shared_ptr<fullspace_ditbasis_32> _basis_ptr = std::make_shared<fullspace_ditbasis_32>(space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 5:
                {
                    std::shared_ptr<dit_subspace_32> space = std::make_shared<dit_subspace_32>(Ns,_lhss);
                    std::shared_ptr<subspace_ditbasis_32> _basis_ptr = std::make_shared<subspace_ditbasis_32>(space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 6:
                {
                    std::shared_ptr<bit_subspace_64> space = std::make_shared<bit_subspace_64>(Ns,_lhss);
                    std::shared_ptr<bit_symmetry<quspin::basis::uint64_t>> symmetry = std::reinterpret_pointer_cast<bit_symmetry<quspin::basis::uint64_t>>(_symmetry.data());
                    std::shared_ptr<symmetric_bitbasis_64> _basis_ptr = std::make_shared<symmetric_bitbasis_64>(*symmetry,space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 7:
                {
                    std::shared_ptr<bit_fullspace_64> space = std::make_shared<bit_fullspace_64>(Ns,_lhss);
                    std::shared_ptr<fullspace_bitbasis_64> _basis_ptr = std::make_shared<fullspace_bitbasis_64>(space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 8:
                {
                    std::shared_ptr<bit_subspace_64> space = std::make_shared<bit_subspace_64>(Ns,_lhss);
                    std::shared_ptr<subspace_bitbasis_64> _basis_ptr = std::make_shared<subspace_bitbasis_64>(space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 9:
                {
                    std::shared_ptr<dit_subspace_64> space = std::make_shared<dit_subspace_64>(Ns,_lhss);
                    std::shared_ptr<dit_symmetry<quspin::basis::uint64_t>> symmetry = std::reinterpret_pointer_cast<dit_symmetry<quspin::basis::uint64_t>>(_symmetry.data());
                    std::shared_ptr<symmetric_ditbasis_64> _basis_ptr = std::make_shared<symmetric_ditbasis_64>(*symmetry,space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 10:
                {
                    std::shared_ptr<dit_fullspace_64> space = std::make_shared<dit_fullspace_64>(Ns,_lhss);
                    std::shared_ptr<fullspace_ditbasis_64> _basis_ptr = std::make_shared<fullspace_ditbasis_64>(space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 11:
                {
                    std::shared_ptr<dit_subspace_64> space = std::make_shared<dit_subspace_64>(Ns,_lhss);
                    std::shared_ptr<subspace_ditbasis_64> _basis_ptr = std::make_shared<subspace_ditbasis_64>(space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 12:
                {
                    std::shared_ptr<bit_subspace_128> space = std::make_shared<bit_subspace_128>(Ns,_lhss);
                    std::shared_ptr<bit_symmetry<quspin::basis::uint128_t>> symmetry = std::reinterpret_pointer_cast<bit_symmetry<quspin::basis::uint128_t>>(_symmetry.data());
                    std::shared_ptr<symmetric_bitbasis_128> _basis_ptr = std::make_shared<symmetric_bitbasis_128>(*symmetry,space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 13:
                {
                    std::shared_ptr<bit_subspace_128> space = std::make_shared<bit_subspace_128>(Ns,_lhss);
                    std::shared_ptr<subspace_bitbasis_128> _basis_ptr = std::make_shared<subspace_bitbasis_128>(space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 14:
                {
                    std::shared_ptr<dit_subspace_128> space = std::make_shared<dit_subspace_128>(Ns,_lhss);
                    std::shared_ptr<dit_symmetry<quspin::basis::uint128_t>> symmetry = std::reinterpret_pointer_cast<dit_symmetry<quspin::basis::uint128_t>>(_symmetry.data());
                    std::shared_ptr<symmetric_ditbasis_128> _basis_ptr = std::make_shared<symmetric_ditbasis_128>(*symmetry,space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 15:
                {
                    std::shared_ptr<dit_subspace_128> space = std::make_shared<dit_subspace_128>(Ns,_lhss);
                    std::shared_ptr<subspace_ditbasis_128> _basis_ptr = std::make_shared<subspace_ditbasis_128>(space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 16:
                {
                    std::shared_ptr<bit_subspace_1024> space = std::make_shared<bit_subspace_1024>(Ns,_lhss);
                    std::shared_ptr<bit_symmetry<quspin::basis::uint1024_t>> symmetry = std::reinterpret_pointer_cast<bit_symmetry<quspin::basis::uint1024_t>>(_symmetry.data());
                    std::shared_ptr<symmetric_bitbasis_1024> _basis_ptr = std::make_shared<symmetric_bitbasis_1024>(*symmetry,space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 17:
                {
                    std::shared_ptr<bit_subspace_1024> space = std::make_shared<bit_subspace_1024>(Ns,_lhss);
                    std::shared_ptr<subspace_bitbasis_1024> _basis_ptr = std::make_shared<subspace_bitbasis_1024>(space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 18:
                {
                    std::shared_ptr<dit_subspace_1024> space = std::make_shared<dit_subspace_1024>(Ns,_lhss);
                    std::shared_ptr<dit_symmetry<quspin::basis::uint1024_t>> symmetry = std::reinterpret_pointer_cast<dit_symmetry<quspin::basis::uint1024_t>>(_symmetry.data());
                    std::shared_ptr<symmetric_ditbasis_1024> _basis_ptr = std::make_shared<symmetric_ditbasis_1024>(*symmetry,space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 19:
                {
                    std::shared_ptr<dit_subspace_1024> space = std::make_shared<dit_subspace_1024>(Ns,_lhss);
                    std::shared_ptr<subspace_ditbasis_1024> _basis_ptr = std::make_shared<subspace_ditbasis_1024>(space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 20:
                {
                    std::shared_ptr<bit_subspace_4096> space = std::make_shared<bit_subspace_4096>(Ns,_lhss);
                    std::shared_ptr<bit_symmetry<quspin::basis::uint4096_t>> symmetry = std::reinterpret_pointer_cast<bit_symmetry<quspin::basis::uint4096_t>>(_symmetry.data());
                    std::shared_ptr<symmetric_bitbasis_4096> _basis_ptr = std::make_shared<symmetric_bitbasis_4096>(*symmetry,space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 21:
                {
                    std::shared_ptr<bit_subspace_4096> space = std::make_shared<bit_subspace_4096>(Ns,_lhss);
                    std::shared_ptr<subspace_bitbasis_4096> _basis_ptr = std::make_shared<subspace_bitbasis_4096>(space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 22:
                {
                    std::shared_ptr<dit_subspace_4096> space = std::make_shared<dit_subspace_4096>(Ns,_lhss);
                    std::shared_ptr<dit_symmetry<quspin::basis::uint4096_t>> symmetry = std::reinterpret_pointer_cast<dit_symmetry<quspin::basis::uint4096_t>>(_symmetry.data());
                    std::shared_ptr<symmetric_ditbasis_4096> _basis_ptr = std::make_shared<symmetric_ditbasis_4096>(*symmetry,space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 23:
                {
                    std::shared_ptr<dit_subspace_4096> space = std::make_shared<dit_subspace_4096>(Ns,_lhss);
                    std::shared_ptr<subspace_ditbasis_4096> _basis_ptr = std::make_shared<subspace_ditbasis_4096>(space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 24:
                {
                    std::shared_ptr<bit_subspace_16384> space = std::make_shared<bit_subspace_16384>(Ns,_lhss);
                    std::shared_ptr<bit_symmetry<quspin::basis::uint16384_t>> symmetry = std::reinterpret_pointer_cast<bit_symmetry<quspin::basis::uint16384_t>>(_symmetry.data());
                    std::shared_ptr<symmetric_bitbasis_16384> _basis_ptr = std::make_shared<symmetric_bitbasis_16384>(*symmetry,space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 25:
                {
                    std::shared_ptr<bit_subspace_16384> space = std::make_shared<bit_subspace_16384>(Ns,_lhss);
                    std::shared_ptr<subspace_bitbasis_16384> _basis_ptr = std::make_shared<subspace_bitbasis_16384>(space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 26:
                {
                    std::shared_ptr<dit_subspace_16384> space = std::make_shared<dit_subspace_16384>(Ns,_lhss);
                    std::shared_ptr<dit_symmetry<quspin::basis::uint16384_t>> symmetry = std::reinterpret_pointer_cast<dit_symmetry<quspin::basis::uint16384_t>>(_symmetry.data());
                    std::shared_ptr<symmetric_ditbasis_16384> _basis_ptr = std::make_shared<symmetric_ditbasis_16384>(*symmetry,space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            case 27:
                {
                    std::shared_ptr<dit_subspace_16384> space = std::make_shared<dit_subspace_16384>(Ns,_lhss);
                    std::shared_ptr<subspace_ditbasis_16384> _basis_ptr = std::make_shared<subspace_ditbasis_16384>(space);
                    basis_ptr = std::reinterpret_pointer_cast<void>(_basis_ptr);
                    break;
                }
            default:
                throw std::invalid_argument("symmetry reduced basis require a subspace object, please set fullspace=False.");
        
        }
    }

    ~bosonic_basis_abi(){}

    void calc_rowptr(
        operator_abi op,
        PyArrayObject * npy_rowptr) const 
    {
        NPY_TYPES T_typenum = op.get_T_typenum();
        NPY_TYPES J_typenum = npy_typenum(npy_rowptr);
        OPERATOR_TYPES op_type = op.get_op_type();
        const int nterms = op.get_nterms();
        void * terms = op.data();
        void * rowptr = npy_data(npy_rowptr);
        const size_t switch_code = generate_term_switch_code(basis_switch_code,J_typenum,T_typenum,op_type);
        switch(switch_code)
        {
            case 0:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 1:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 2:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 3:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 4:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 5:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 6:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 7:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 8:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 9:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 10:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 11:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 12:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 13:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 14:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 15:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 16:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int32*)rowptr); break;
            case 17:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 18:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int32*)rowptr); break;
            case 19:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 20:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 21:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 22:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 23:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 24:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 25:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 26:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 27:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 28:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int64*)rowptr); break;
            case 29:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 30:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int64*)rowptr); break;
            case 31:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 32:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 33:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 34:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 35:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 36:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 37:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 38:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 39:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 40:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int32*)rowptr); break;
            case 41:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 42:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int32*)rowptr); break;
            case 43:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 44:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 45:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 46:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 47:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 48:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 49:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 50:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 51:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 52:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int64*)rowptr); break;
            case 53:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 54:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int64*)rowptr); break;
            case 55:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 56:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 57:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 58:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 59:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 60:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 61:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 62:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 63:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 64:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 65:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 66:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 67:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 68:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 69:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 70:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 71:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 72:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 73:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 74:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 75:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 76:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 77:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 78:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 79:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 80:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int32*)rowptr); break;
            case 81:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 82:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int32*)rowptr); break;
            case 83:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 84:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 85:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 86:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 87:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 88:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 89:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 90:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 91:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 92:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int64*)rowptr); break;
            case 93:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 94:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int64*)rowptr); break;
            case 95:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 96:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 97:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 98:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 99:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 100:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 101:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 102:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 103:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 104:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int32*)rowptr); break;
            case 105:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 106:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int32*)rowptr); break;
            case 107:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 108:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 109:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 110:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 111:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 112:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 113:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 114:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 115:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 116:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int64*)rowptr); break;
            case 117:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 118:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int64*)rowptr); break;
            case 119:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 120:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 121:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 122:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 123:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 124:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 125:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 126:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 127:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 128:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 129:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 130:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 131:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 132:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 133:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 134:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 135:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 136:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 137:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 138:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 139:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 140:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 141:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 142:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 143:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 144:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int32*)rowptr); break;
            case 145:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 146:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int32*)rowptr); break;
            case 147:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 148:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 149:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 150:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 151:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 152:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 153:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 154:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 155:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 156:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int64*)rowptr); break;
            case 157:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 158:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int64*)rowptr); break;
            case 159:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 160:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 161:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 162:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 163:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 164:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 165:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 166:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 167:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 168:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int32*)rowptr); break;
            case 169:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 170:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int32*)rowptr); break;
            case 171:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 172:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 173:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 174:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 175:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 176:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 177:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 178:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 179:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 180:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int64*)rowptr); break;
            case 181:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 182:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int64*)rowptr); break;
            case 183:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 184:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 185:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 186:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 187:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 188:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 189:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 190:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 191:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 192:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 193:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 194:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 195:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 196:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 197:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 198:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 199:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 200:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 201:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 202:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 203:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 204:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 205:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 206:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 207:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 208:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int32*)rowptr); break;
            case 209:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 210:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int32*)rowptr); break;
            case 211:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 212:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 213:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 214:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 215:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 216:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 217:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 218:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 219:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 220:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int64*)rowptr); break;
            case 221:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 222:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int64*)rowptr); break;
            case 223:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 224:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 225:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 226:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 227:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 228:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 229:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 230:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 231:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 232:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int32*)rowptr); break;
            case 233:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 234:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int32*)rowptr); break;
            case 235:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 236:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 237:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 238:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 239:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 240:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 241:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 242:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 243:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 244:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int64*)rowptr); break;
            case 245:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 246:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int64*)rowptr); break;
            case 247:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 248:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 249:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 250:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 251:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 252:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 253:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 254:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 255:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 256:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 257:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 258:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 259:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 260:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 261:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 262:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 263:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 264:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 265:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 266:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 267:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 268:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 269:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 270:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 271:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 272:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int32*)rowptr); break;
            case 273:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 274:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int32*)rowptr); break;
            case 275:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 276:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 277:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 278:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 279:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 280:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 281:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 282:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 283:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 284:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int64*)rowptr); break;
            case 285:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 286:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int64*)rowptr); break;
            case 287:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 288:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 289:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 290:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 291:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 292:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 293:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 294:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 295:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 296:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 297:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 298:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 299:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 300:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 301:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 302:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 303:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 304:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 305:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 306:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 307:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 308:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 309:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 310:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 311:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 312:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int32*)rowptr); break;
            case 313:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 314:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int32*)rowptr); break;
            case 315:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 316:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 317:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 318:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 319:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 320:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 321:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 322:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 323:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 324:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int64*)rowptr); break;
            case 325:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 326:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int64*)rowptr); break;
            case 327:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 328:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 329:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 330:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 331:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 332:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 333:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 334:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 335:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 336:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 337:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 338:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 339:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 340:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 341:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 342:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 343:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 344:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 345:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 346:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 347:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 348:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 349:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 350:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 351:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 352:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int32*)rowptr); break;
            case 353:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 354:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int32*)rowptr); break;
            case 355:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 356:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 357:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 358:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 359:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 360:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 361:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 362:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 363:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 364:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int64*)rowptr); break;
            case 365:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 366:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int64*)rowptr); break;
            case 367:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 368:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 369:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 370:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 371:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 372:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 373:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 374:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 375:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 376:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 377:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 378:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 379:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 380:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 381:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 382:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 383:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 384:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 385:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 386:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 387:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 388:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 389:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 390:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 391:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 392:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int32*)rowptr); break;
            case 393:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 394:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int32*)rowptr); break;
            case 395:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 396:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 397:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 398:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 399:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 400:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 401:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 402:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 403:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 404:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int64*)rowptr); break;
            case 405:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 406:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int64*)rowptr); break;
            case 407:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 408:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 409:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 410:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 411:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 412:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 413:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 414:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 415:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 416:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 417:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 418:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 419:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 420:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 421:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 422:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 423:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 424:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 425:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 426:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 427:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 428:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 429:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 430:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 431:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 432:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int32*)rowptr); break;
            case 433:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 434:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int32*)rowptr); break;
            case 435:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 436:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 437:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 438:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 439:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 440:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 441:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 442:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 443:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 444:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int64*)rowptr); break;
            case 445:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 446:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int64*)rowptr); break;
            case 447:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 448:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 449:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 450:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 451:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 452:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 453:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 454:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 455:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 456:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 457:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 458:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 459:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 460:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 461:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 462:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 463:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 464:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 465:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 466:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 467:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 468:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 469:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 470:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 471:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 472:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int32*)rowptr); break;
            case 473:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 474:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int32*)rowptr); break;
            case 475:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 476:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 477:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 478:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 479:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 480:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 481:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 482:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 483:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 484:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int64*)rowptr); break;
            case 485:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 486:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int64*)rowptr); break;
            case 487:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 488:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 489:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 490:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 491:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 492:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 493:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 494:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 495:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 496:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 497:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 498:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 499:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 500:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 501:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 502:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 503:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 504:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 505:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 506:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 507:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 508:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 509:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 510:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 511:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 512:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int32*)rowptr); break;
            case 513:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 514:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int32*)rowptr); break;
            case 515:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 516:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 517:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 518:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 519:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 520:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 521:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 522:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 523:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 524:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int64*)rowptr); break;
            case 525:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 526:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int64*)rowptr); break;
            case 527:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 528:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 529:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 530:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 531:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 532:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 533:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 534:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 535:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 536:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 537:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 538:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 539:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 540:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 541:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 542:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 543:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 544:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 545:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 546:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 547:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 548:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 549:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 550:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 551:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 552:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int32*)rowptr); break;
            case 553:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 554:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int32*)rowptr); break;
            case 555:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 556:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int32*)rowptr); break;
            case 557:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 558:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int32*)rowptr); break;
            case 559:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 560:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 561:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 562:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int32*)rowptr); break;
            case 563:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int32*)rowptr); break;
            case 564:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int64*)rowptr); break;
            case 565:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 566:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int64*)rowptr); break;
            case 567:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 568:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<float>*)terms, nterms, (npy_int64*)rowptr); break;
            case 569:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<float,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 570:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<double>*)terms, nterms, (npy_int64*)rowptr); break;
            case 571:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<double,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 572:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 573:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            case 574:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_int64*)rowptr); break;
            case 575:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_rowptr((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_int64*)rowptr); break;
            default:
                throw std::runtime_error("this message should not appear.");
        
        }
    }
    void calc_matrix(
        operator_abi op,
        PyArrayObject * npy_values,
        PyArrayObject * npy_indices,
        PyArrayObject * npy_rowptr) const 
    {
        NPY_TYPES J_typenum = npy_typenum(npy_indices);
        NPY_TYPES T_typenum = npy_typenum(npy_values);
        OPERATOR_TYPES op_type = op.get_op_type();
        const int nterms = op.get_nterms();
        void * terms = op.data();
        void * values = npy_data(npy_values);
        void * indices = npy_data(npy_indices);
        void * rowptr = npy_data(npy_rowptr);
        const size_t switch_code = generate_term_switch_code(basis_switch_code,J_typenum,T_typenum,op_type);
        switch(switch_code)
        {
            case 0:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 1:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 2:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 3:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 4:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 5:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 6:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 7:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 8:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 9:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 10:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 11:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 12:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 13:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 14:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 15:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 16:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 17:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 18:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 19:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 20:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 21:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 22:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 23:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 24:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 25:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 26:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 27:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 28:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 29:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 30:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 31:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 32:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 33:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 34:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 35:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 36:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 37:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 38:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 39:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 40:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 41:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 42:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 43:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 44:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 45:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 46:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 47:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 48:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 49:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 50:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 51:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 52:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 53:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 54:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 55:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 56:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 57:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 58:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 59:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 60:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 61:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 62:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 63:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 64:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 65:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 66:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 67:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 68:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 69:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 70:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 71:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 72:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 73:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 74:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 75:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 76:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 77:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 78:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 79:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 80:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 81:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 82:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 83:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 84:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 85:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 86:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 87:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 88:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 89:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 90:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 91:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 92:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 93:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 94:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 95:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 96:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 97:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 98:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 99:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 100:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 101:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 102:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 103:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 104:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 105:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 106:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 107:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 108:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 109:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 110:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 111:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 112:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 113:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 114:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 115:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 116:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 117:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 118:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 119:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 120:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 121:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 122:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 123:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 124:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 125:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 126:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 127:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 128:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 129:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 130:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 131:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 132:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 133:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 134:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 135:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 136:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 137:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 138:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 139:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 140:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 141:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 142:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 143:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 144:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 145:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 146:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 147:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 148:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 149:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 150:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 151:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 152:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 153:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 154:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 155:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 156:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 157:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 158:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 159:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 160:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 161:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 162:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 163:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 164:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 165:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 166:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 167:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 168:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 169:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 170:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 171:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 172:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 173:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 174:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 175:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 176:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 177:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 178:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 179:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 180:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 181:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 182:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 183:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 184:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 185:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 186:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 187:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 188:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 189:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 190:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 191:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 192:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 193:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 194:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 195:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 196:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 197:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 198:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 199:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 200:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 201:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 202:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 203:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 204:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 205:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 206:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 207:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 208:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 209:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 210:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 211:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 212:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 213:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 214:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 215:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 216:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 217:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 218:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 219:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 220:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 221:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 222:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 223:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 224:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 225:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 226:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 227:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 228:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 229:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 230:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 231:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 232:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 233:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 234:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 235:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 236:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 237:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 238:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 239:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 240:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 241:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 242:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 243:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 244:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 245:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 246:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 247:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 248:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 249:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 250:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 251:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 252:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 253:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 254:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 255:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 256:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 257:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 258:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 259:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 260:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 261:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 262:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 263:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 264:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 265:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 266:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 267:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 268:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 269:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 270:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 271:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 272:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 273:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 274:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 275:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 276:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 277:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 278:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 279:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 280:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 281:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 282:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 283:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 284:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 285:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 286:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 287:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 288:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 289:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 290:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 291:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 292:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 293:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 294:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 295:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 296:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 297:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 298:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 299:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 300:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 301:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 302:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 303:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 304:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 305:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 306:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 307:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 308:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 309:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 310:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 311:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 312:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 313:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 314:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 315:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 316:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 317:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 318:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 319:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 320:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 321:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 322:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 323:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 324:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 325:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 326:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 327:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 328:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 329:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 330:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 331:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 332:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 333:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 334:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 335:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 336:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 337:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 338:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 339:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 340:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 341:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 342:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 343:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 344:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 345:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 346:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 347:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 348:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 349:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 350:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 351:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 352:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 353:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 354:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 355:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 356:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 357:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 358:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 359:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 360:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 361:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 362:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 363:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 364:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 365:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 366:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 367:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 368:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 369:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 370:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 371:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 372:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 373:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 374:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 375:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 376:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 377:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 378:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 379:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 380:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 381:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 382:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 383:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 384:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 385:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 386:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 387:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 388:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 389:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 390:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 391:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 392:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 393:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 394:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 395:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 396:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 397:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 398:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 399:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 400:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 401:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 402:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 403:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 404:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 405:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 406:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 407:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 408:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 409:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 410:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 411:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 412:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 413:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 414:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 415:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 416:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 417:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 418:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 419:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 420:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 421:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 422:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 423:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 424:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 425:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 426:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 427:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 428:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 429:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 430:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 431:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 432:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 433:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 434:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 435:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 436:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 437:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 438:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 439:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 440:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 441:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 442:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 443:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 444:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 445:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 446:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 447:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 448:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 449:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 450:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 451:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 452:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 453:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 454:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 455:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 456:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 457:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 458:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 459:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 460:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 461:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 462:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 463:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 464:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 465:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 466:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 467:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 468:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 469:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 470:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 471:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 472:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 473:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 474:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 475:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 476:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 477:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 478:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 479:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 480:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 481:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 482:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 483:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 484:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 485:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 486:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 487:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 488:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 489:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 490:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 491:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 492:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 493:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 494:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 495:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 496:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 497:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 498:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 499:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 500:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 501:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 502:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 503:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 504:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 505:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 506:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 507:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 508:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 509:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 510:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 511:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 512:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 513:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 514:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 515:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 516:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 517:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 518:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 519:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 520:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 521:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 522:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 523:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 524:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 525:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 526:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 527:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 528:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 529:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 530:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 531:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 532:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 533:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 534:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 535:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 536:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 537:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 538:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 539:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 540:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 541:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 542:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 543:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 544:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 545:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 546:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 547:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 548:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 549:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 550:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 551:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 552:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 553:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 554:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 555:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 556:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 557:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 558:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 559:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 560:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 561:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 562:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 563:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int32*)indices, (npy_int32*)rowptr); break;
            case 564:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int8>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 565:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, (npy_int8*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 566:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_int16>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 567:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, (npy_int16*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 568:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<float>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 569:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<float,2>*)terms, nterms, (float*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 570:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<double>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 571:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<double,2>*)terms, nterms, (double*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 572:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 573:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, (npy_cfloat_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 574:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            case 575:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->calc_matrix((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, (npy_cdouble_wrapper*)values, (npy_int64*)indices, (npy_int64*)rowptr); break;
            default:
                throw std::runtime_error("this message should not appear.");
        
        }
    }
    void on_the_fly(
        operator_abi op,
        PyArrayObject * npy_a,
        PyArrayObject * npy_input,
        PyArrayObject * npy_b,
        PyArrayObject * npy_output) const 
    {
        NPY_TYPES T_typenum = op.get_T_typenum();
        NPY_TYPES X_typenum = npy_typenum(npy_input);
        NPY_TYPES Y_typenum = npy_typenum(npy_output);
        OPERATOR_TYPES op_type = op.get_op_type();
        const int nterms = op.get_nterms();
        void * terms = op.data();
        void * input = npy_data(npy_input);
        void * output = npy_data(npy_output);
        void * a = npy_data(npy_a);
        void * b = npy_data(npy_b);
        const size_t switch_code = generate_otf_switch_code(basis_switch_code,T_typenum,X_typenum,Y_typenum,op_type);
        switch(switch_code)
        {
            case 0:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 1:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 2:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 3:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 4:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 5:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 6:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 7:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 8:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 9:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 10:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 11:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 12:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 13:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 14:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 15:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 16:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 17:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 18:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 19:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 20:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 21:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 22:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 23:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 24:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 25:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 26:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 27:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 28:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 29:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 30:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 31:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 32:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 33:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 34:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 35:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 36:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 37:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 38:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 39:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 40:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 41:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 42:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 43:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 44:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 45:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 46:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 47:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 48:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 49:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 50:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 51:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 52:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 53:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 54:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 55:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 56:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 57:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 58:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 59:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 60:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 61:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 62:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 63:
                std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 64:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 65:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 66:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 67:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 68:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 69:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 70:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 71:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 72:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 73:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 74:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 75:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 76:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 77:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 78:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 79:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 80:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 81:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 82:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 83:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 84:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 85:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 86:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 87:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 88:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 89:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 90:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 91:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 92:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 93:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 94:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 95:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 96:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 97:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 98:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 99:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 100:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 101:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 102:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 103:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 104:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 105:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 106:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 107:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 108:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 109:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 110:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 111:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 112:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 113:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 114:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 115:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 116:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 117:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 118:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 119:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 120:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 121:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 122:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 123:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 124:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 125:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 126:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 127:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 128:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 129:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 130:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 131:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 132:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 133:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 134:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 135:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 136:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 137:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 138:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 139:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 140:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 141:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 142:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 143:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 144:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 145:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 146:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 147:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 148:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 149:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 150:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 151:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 152:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 153:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 154:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 155:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 156:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 157:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 158:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 159:
                std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 160:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 161:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 162:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 163:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 164:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 165:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 166:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 167:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 168:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 169:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 170:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 171:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 172:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 173:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 174:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 175:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 176:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 177:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 178:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 179:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 180:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 181:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 182:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 183:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 184:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 185:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 186:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 187:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 188:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 189:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 190:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 191:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 192:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 193:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 194:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 195:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 196:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 197:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 198:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 199:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 200:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 201:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 202:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 203:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 204:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 205:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 206:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 207:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 208:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 209:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 210:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 211:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 212:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 213:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 214:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 215:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 216:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 217:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 218:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 219:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 220:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 221:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 222:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 223:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 224:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 225:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 226:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 227:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 228:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 229:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 230:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 231:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 232:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 233:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 234:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 235:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 236:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 237:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 238:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 239:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 240:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 241:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 242:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 243:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 244:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 245:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 246:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 247:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 248:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 249:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 250:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 251:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 252:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 253:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 254:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 255:
                std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 256:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 257:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 258:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 259:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 260:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 261:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 262:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 263:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 264:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 265:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 266:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 267:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 268:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 269:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 270:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 271:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 272:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 273:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 274:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 275:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 276:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 277:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 278:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 279:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 280:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 281:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 282:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 283:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 284:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 285:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 286:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 287:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 288:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 289:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 290:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 291:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 292:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 293:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 294:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 295:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 296:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 297:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 298:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 299:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 300:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 301:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 302:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 303:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 304:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 305:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 306:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 307:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 308:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 309:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 310:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 311:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 312:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 313:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 314:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 315:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 316:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 317:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 318:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 319:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 320:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 321:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 322:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 323:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 324:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 325:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 326:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 327:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 328:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 329:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 330:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 331:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 332:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 333:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 334:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 335:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 336:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 337:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 338:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 339:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 340:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 341:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 342:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 343:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 344:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 345:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 346:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 347:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 348:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 349:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 350:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 351:
                std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 352:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 353:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 354:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 355:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 356:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 357:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 358:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 359:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 360:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 361:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 362:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 363:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 364:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 365:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 366:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 367:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 368:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 369:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 370:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 371:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 372:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 373:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 374:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 375:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 376:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 377:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 378:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 379:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 380:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 381:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 382:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 383:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 384:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 385:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 386:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 387:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 388:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 389:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 390:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 391:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 392:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 393:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 394:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 395:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 396:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 397:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 398:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 399:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 400:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 401:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 402:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 403:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 404:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 405:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 406:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 407:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 408:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 409:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 410:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 411:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 412:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 413:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 414:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 415:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 416:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 417:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 418:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 419:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 420:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 421:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 422:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 423:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 424:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 425:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 426:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 427:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 428:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 429:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 430:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 431:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 432:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 433:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 434:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 435:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 436:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 437:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 438:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 439:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 440:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 441:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 442:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 443:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 444:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 445:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 446:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 447:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 448:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 449:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 450:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 451:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 452:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 453:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 454:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 455:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 456:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 457:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 458:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 459:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 460:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 461:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 462:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 463:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 464:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 465:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 466:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 467:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 468:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 469:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 470:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 471:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 472:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 473:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 474:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 475:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 476:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 477:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 478:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 479:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 480:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 481:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 482:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 483:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 484:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 485:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 486:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 487:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 488:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 489:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 490:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 491:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 492:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 493:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 494:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 495:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 496:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 497:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 498:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 499:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 500:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 501:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 502:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 503:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 504:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 505:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 506:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 507:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 508:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 509:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 510:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 511:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 512:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 513:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 514:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 515:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 516:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 517:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 518:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 519:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 520:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 521:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 522:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 523:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 524:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 525:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 526:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 527:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 528:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 529:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 530:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 531:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 532:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 533:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 534:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 535:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 536:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 537:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 538:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 539:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 540:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 541:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 542:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 543:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 544:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 545:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 546:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 547:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 548:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 549:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 550:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 551:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 552:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 553:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 554:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 555:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 556:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 557:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 558:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 559:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 560:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 561:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 562:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 563:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 564:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 565:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 566:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 567:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 568:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 569:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 570:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 571:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 572:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 573:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 574:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 575:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 576:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 577:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 578:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 579:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 580:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 581:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 582:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 583:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 584:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 585:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 586:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 587:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 588:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 589:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 590:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 591:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 592:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 593:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 594:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 595:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 596:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 597:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 598:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 599:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 600:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 601:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 602:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 603:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 604:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 605:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 606:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 607:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 608:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 609:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 610:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 611:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 612:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 613:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 614:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 615:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 616:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 617:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 618:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 619:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 620:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 621:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 622:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 623:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 624:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 625:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 626:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 627:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 628:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 629:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 630:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 631:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 632:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 633:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 634:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 635:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 636:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 637:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 638:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 639:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 640:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 641:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 642:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 643:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 644:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 645:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 646:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 647:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 648:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 649:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 650:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 651:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 652:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 653:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 654:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 655:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 656:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 657:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 658:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 659:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 660:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 661:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 662:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 663:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 664:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 665:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 666:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 667:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 668:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 669:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 670:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 671:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 672:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 673:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 674:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 675:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 676:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 677:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 678:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 679:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 680:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 681:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 682:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 683:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 684:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 685:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 686:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 687:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 688:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 689:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 690:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 691:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 692:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 693:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 694:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 695:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 696:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 697:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 698:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 699:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 700:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 701:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 702:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 703:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 704:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 705:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 706:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 707:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 708:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 709:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 710:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 711:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 712:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 713:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 714:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 715:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 716:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 717:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 718:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 719:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 720:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 721:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 722:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 723:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 724:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 725:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 726:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 727:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 728:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 729:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 730:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 731:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 732:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 733:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 734:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 735:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 736:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 737:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 738:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 739:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 740:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 741:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 742:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 743:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 744:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 745:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 746:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 747:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 748:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 749:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 750:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 751:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 752:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 753:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 754:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 755:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 756:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 757:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 758:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 759:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 760:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 761:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 762:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 763:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 764:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 765:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 766:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 767:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 768:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 769:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 770:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 771:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 772:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 773:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 774:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 775:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 776:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 777:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 778:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 779:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 780:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 781:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 782:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 783:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 784:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 785:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 786:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 787:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 788:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 789:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 790:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 791:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 792:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 793:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 794:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 795:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 796:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 797:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 798:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 799:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 800:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 801:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 802:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 803:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 804:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 805:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 806:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 807:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 808:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 809:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 810:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 811:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 812:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 813:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 814:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 815:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 816:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 817:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 818:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 819:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 820:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 821:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 822:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 823:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 824:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 825:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 826:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 827:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 828:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 829:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 830:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 831:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 832:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 833:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 834:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 835:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 836:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 837:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 838:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 839:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 840:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 841:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 842:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 843:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 844:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 845:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 846:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 847:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 848:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 849:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 850:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 851:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 852:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 853:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 854:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 855:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 856:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 857:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 858:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 859:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 860:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 861:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 862:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 863:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 864:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 865:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const float*)a, (const float*)input, *(const float*)b, (float*)output); break;
            case 866:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 867:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 868:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 869:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 870:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<float>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 871:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<float,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 872:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 873:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const float*)input, *(const double*)b, (double*)output); break;
            case 874:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 875:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const double*)a, (const double*)input, *(const double*)b, (double*)output); break;
            case 876:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 877:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 878:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<double>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 879:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<double,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 880:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 881:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const float*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 882:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 883:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 884:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 885:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cfloat_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cfloat_wrapper*)b, (npy_cfloat_wrapper*)output); break;
            case 886:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 887:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 888:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 889:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const float*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 890:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 891:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const double*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 892:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 893:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cfloat_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 894:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            case 895:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->on_the_fly((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, *(const npy_cdouble_wrapper*)a, (const npy_cdouble_wrapper*)input, *(const npy_cdouble_wrapper*)b, (npy_cdouble_wrapper*)output); break;
            default:
                throw std::runtime_error("this message should not appear.");
        
        }
    }
    void build_subspace(
        NPY_TYPES T_typenum,
        OPERATOR_TYPES op_type,
        void* terms,
        const int nterms,
        const std::vector<int>& seed_state)
    {
        const size_t switch_code = generate_build_subspace_switch_code(basis_switch_code,T_typenum,op_type);
        switch(switch_code)
        {
            case 0:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 1:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 2:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 3:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 4:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 5:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 6:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 7:
                std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 8:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int8>*)terms, nterms, seed_state, lhss); break;
            case 9:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, seed_state, lhss); break;
            case 10:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int16>*)terms, nterms, seed_state, lhss); break;
            case 11:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, seed_state, lhss); break;
            case 12:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 13:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 14:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 15:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 16:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 17:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 18:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 19:
                std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 20:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 21:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 22:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 23:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 24:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 25:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 26:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 27:
                std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 28:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int8>*)terms, nterms, seed_state, lhss); break;
            case 29:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, seed_state, lhss); break;
            case 30:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int16>*)terms, nterms, seed_state, lhss); break;
            case 31:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, seed_state, lhss); break;
            case 32:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 33:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 34:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 35:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 36:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 37:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 38:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 39:
                std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 40:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 41:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 42:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 43:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 44:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 45:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 46:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 47:
                std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 48:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int8>*)terms, nterms, seed_state, lhss); break;
            case 49:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, seed_state, lhss); break;
            case 50:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int16>*)terms, nterms, seed_state, lhss); break;
            case 51:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, seed_state, lhss); break;
            case 52:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 53:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 54:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 55:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 56:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 57:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 58:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 59:
                std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 60:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 61:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 62:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 63:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 64:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 65:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 66:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 67:
                std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 68:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int8>*)terms, nterms, seed_state, lhss); break;
            case 69:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, seed_state, lhss); break;
            case 70:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int16>*)terms, nterms, seed_state, lhss); break;
            case 71:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, seed_state, lhss); break;
            case 72:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 73:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 74:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 75:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 76:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 77:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 78:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 79:
                std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 80:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 81:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 82:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 83:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 84:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 85:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 86:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 87:
                std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 88:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int8>*)terms, nterms, seed_state, lhss); break;
            case 89:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, seed_state, lhss); break;
            case 90:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int16>*)terms, nterms, seed_state, lhss); break;
            case 91:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, seed_state, lhss); break;
            case 92:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 93:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 94:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 95:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 96:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 97:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 98:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 99:
                std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 100:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 101:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 102:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 103:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 104:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 105:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 106:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 107:
                std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 108:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int8>*)terms, nterms, seed_state, lhss); break;
            case 109:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, seed_state, lhss); break;
            case 110:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int16>*)terms, nterms, seed_state, lhss); break;
            case 111:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, seed_state, lhss); break;
            case 112:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 113:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 114:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 115:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 116:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 117:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 118:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 119:
                std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 120:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 121:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 122:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 123:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 124:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 125:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 126:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 127:
                std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 128:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int8>*)terms, nterms, seed_state, lhss); break;
            case 129:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, seed_state, lhss); break;
            case 130:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int16>*)terms, nterms, seed_state, lhss); break;
            case 131:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, seed_state, lhss); break;
            case 132:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 133:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 134:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 135:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 136:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 137:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 138:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 139:
                std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 140:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 141:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 142:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 143:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 144:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 145:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 146:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 147:
                std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 148:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int8>*)terms, nterms, seed_state, lhss); break;
            case 149:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, seed_state, lhss); break;
            case 150:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int16>*)terms, nterms, seed_state, lhss); break;
            case 151:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, seed_state, lhss); break;
            case 152:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 153:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 154:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 155:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 156:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 157:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 158:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 159:
                std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 160:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 161:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 162:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 163:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 164:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 165:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 166:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 167:
                std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 168:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int8>*)terms, nterms, seed_state, lhss); break;
            case 169:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, seed_state, lhss); break;
            case 170:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int16>*)terms, nterms, seed_state, lhss); break;
            case 171:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, seed_state, lhss); break;
            case 172:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 173:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 174:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 175:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 176:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 177:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 178:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 179:
                std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 180:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 181:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 182:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 183:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 184:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 185:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 186:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 187:
                std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 188:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int8>*)terms, nterms, seed_state, lhss); break;
            case 189:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, seed_state, lhss); break;
            case 190:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int16>*)terms, nterms, seed_state, lhss); break;
            case 191:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, seed_state, lhss); break;
            case 192:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 193:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 194:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 195:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 196:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 197:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 198:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 199:
                std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 200:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 201:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 202:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 203:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 204:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 205:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 206:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 207:
                std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 208:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int8>*)terms, nterms, seed_state, lhss); break;
            case 209:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_int8,2>*)terms, nterms, seed_state, lhss); break;
            case 210:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int16>*)terms, nterms, seed_state, lhss); break;
            case 211:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_int16,2>*)terms, nterms, seed_state, lhss); break;
            case 212:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 213:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 214:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 215:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 216:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 217:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 218:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 219:
                std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_bit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 220:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 221:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 222:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 223:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 224:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 225:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 226:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 227:
                std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 228:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int8>*)terms, nterms, seed_state, lhss); break;
            case 229:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_int8,2>*)terms, nterms, seed_state, lhss); break;
            case 230:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<npy_int16>*)terms, nterms, seed_state, lhss); break;
            case 231:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_int16,2>*)terms, nterms, seed_state, lhss); break;
            case 232:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<float>*)terms, nterms, seed_state, lhss); break;
            case 233:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<float,2>*)terms, nterms, seed_state, lhss); break;
            case 234:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<double>*)terms, nterms, seed_state, lhss); break;
            case 235:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<double,2>*)terms, nterms, seed_state, lhss); break;
            case 236:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cfloat_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 237:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cfloat_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            case 238:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::operator_string<npy_cdouble_wrapper>*)terms, nterms, seed_state, lhss); break;
            case 239:
                std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->build_subspace((const quspin::N_body_dit_op<npy_cdouble_wrapper,2>*)terms, nterms, seed_state, lhss); break;
            default:
                throw std::runtime_error("this message should not appear.");
        
        }
    }
    std::vector<quspin::basis::dit_integer_t> get_state(
        const npy_intp state_index) const 
    {
        switch(basis_switch_code)
        {
            case 0:
                return std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->space->get_state(state_index).to_vector();
            case 1:
                return std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->space->get_state(state_index).to_vector();
            case 2:
                return std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->space->get_state(state_index).to_vector();
            case 3:
                return std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->space->get_state(state_index).to_vector();
            case 4:
                return std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->space->get_state(state_index).to_vector();
            case 5:
                return std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->space->get_state(state_index).to_vector();
            case 6:
                return std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->space->get_state(state_index).to_vector();
            case 7:
                return std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->space->get_state(state_index).to_vector();
            case 8:
                return std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->space->get_state(state_index).to_vector();
            case 9:
                return std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->space->get_state(state_index).to_vector();
            case 10:
                return std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->space->get_state(state_index).to_vector();
            case 11:
                return std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->space->get_state(state_index).to_vector();
            case 12:
                return std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->space->get_state(state_index).to_vector();
            case 13:
                return std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->space->get_state(state_index).to_vector();
            case 14:
                return std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->space->get_state(state_index).to_vector();
            case 15:
                return std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->space->get_state(state_index).to_vector();
            case 16:
                return std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->space->get_state(state_index).to_vector();
            case 17:
                return std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->space->get_state(state_index).to_vector();
            case 18:
                return std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->space->get_state(state_index).to_vector();
            case 19:
                return std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->space->get_state(state_index).to_vector();
            case 20:
                return std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->space->get_state(state_index).to_vector();
            case 21:
                return std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->space->get_state(state_index).to_vector();
            case 22:
                return std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->space->get_state(state_index).to_vector();
            case 23:
                return std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->space->get_state(state_index).to_vector();
            case 24:
                return std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->space->get_state(state_index).to_vector();
            case 25:
                return std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->space->get_state(state_index).to_vector();
            case 26:
                return std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->space->get_state(state_index).to_vector();
            case 27:
                return std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->space->get_state(state_index).to_vector();
            default:
                throw std::runtime_error("this message should not appear.");
        
        }
    }
    npy_intp get_index(
        const std::vector<quspin::basis::dit_integer_t>& state_vector) const 
    {
        switch(basis_switch_code)
        {
            case 0:
                return std::reinterpret_pointer_cast<symmetric_bitbasis_32>(basis_ptr)->space->get_index(state_vector);
            case 1:
                return std::reinterpret_pointer_cast<fullspace_bitbasis_32>(basis_ptr)->space->get_index(state_vector);
            case 2:
                return std::reinterpret_pointer_cast<subspace_bitbasis_32>(basis_ptr)->space->get_index(state_vector);
            case 3:
                return std::reinterpret_pointer_cast<symmetric_ditbasis_32>(basis_ptr)->space->get_index(state_vector);
            case 4:
                return std::reinterpret_pointer_cast<fullspace_ditbasis_32>(basis_ptr)->space->get_index(state_vector);
            case 5:
                return std::reinterpret_pointer_cast<subspace_ditbasis_32>(basis_ptr)->space->get_index(state_vector);
            case 6:
                return std::reinterpret_pointer_cast<symmetric_bitbasis_64>(basis_ptr)->space->get_index(state_vector);
            case 7:
                return std::reinterpret_pointer_cast<fullspace_bitbasis_64>(basis_ptr)->space->get_index(state_vector);
            case 8:
                return std::reinterpret_pointer_cast<subspace_bitbasis_64>(basis_ptr)->space->get_index(state_vector);
            case 9:
                return std::reinterpret_pointer_cast<symmetric_ditbasis_64>(basis_ptr)->space->get_index(state_vector);
            case 10:
                return std::reinterpret_pointer_cast<fullspace_ditbasis_64>(basis_ptr)->space->get_index(state_vector);
            case 11:
                return std::reinterpret_pointer_cast<subspace_ditbasis_64>(basis_ptr)->space->get_index(state_vector);
            case 12:
                return std::reinterpret_pointer_cast<symmetric_bitbasis_128>(basis_ptr)->space->get_index(state_vector);
            case 13:
                return std::reinterpret_pointer_cast<subspace_bitbasis_128>(basis_ptr)->space->get_index(state_vector);
            case 14:
                return std::reinterpret_pointer_cast<symmetric_ditbasis_128>(basis_ptr)->space->get_index(state_vector);
            case 15:
                return std::reinterpret_pointer_cast<subspace_ditbasis_128>(basis_ptr)->space->get_index(state_vector);
            case 16:
                return std::reinterpret_pointer_cast<symmetric_bitbasis_1024>(basis_ptr)->space->get_index(state_vector);
            case 17:
                return std::reinterpret_pointer_cast<subspace_bitbasis_1024>(basis_ptr)->space->get_index(state_vector);
            case 18:
                return std::reinterpret_pointer_cast<symmetric_ditbasis_1024>(basis_ptr)->space->get_index(state_vector);
            case 19:
                return std::reinterpret_pointer_cast<subspace_ditbasis_1024>(basis_ptr)->space->get_index(state_vector);
            case 20:
                return std::reinterpret_pointer_cast<symmetric_bitbasis_4096>(basis_ptr)->space->get_index(state_vector);
            case 21:
                return std::reinterpret_pointer_cast<subspace_bitbasis_4096>(basis_ptr)->space->get_index(state_vector);
            case 22:
                return std::reinterpret_pointer_cast<symmetric_ditbasis_4096>(basis_ptr)->space->get_index(state_vector);
            case 23:
                return std::reinterpret_pointer_cast<subspace_ditbasis_4096>(basis_ptr)->space->get_index(state_vector);
            case 24:
                return std::reinterpret_pointer_cast<symmetric_bitbasis_16384>(basis_ptr)->space->get_index(state_vector);
            case 25:
                return std::reinterpret_pointer_cast<subspace_bitbasis_16384>(basis_ptr)->space->get_index(state_vector);
            case 26:
                return std::reinterpret_pointer_cast<symmetric_ditbasis_16384>(basis_ptr)->space->get_index(state_vector);
            case 27:
                return std::reinterpret_pointer_cast<subspace_ditbasis_16384>(basis_ptr)->space->get_index(state_vector);
            default:
                throw std::runtime_error("this message should not appear.");
        
        }
    }

};

    

    
    }
    #endif